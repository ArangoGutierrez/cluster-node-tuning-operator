// Code generated by go-bindata.
// sources:
// manifests/01-namespace.yaml
// manifests/02-crd.yaml
// manifests/03-cr.yaml
// manifests/04-rbac.yaml
// manifests/05-operator.yaml
// assets/tuned/01-namespace.yaml
// assets/tuned/02-service-account.yaml
// assets/tuned/03-cluster-role.yaml
// assets/tuned/04-cluster-role-binding.yaml
// assets/tuned/05-cm-tuned-profiles.yaml
// assets/tuned/06-cm-tuned-recommend.yaml
// assets/tuned/07-ds-tuned.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _manifests01NamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x11\x82\x21\x0c\x05\xe0\x9e\x29\xb2\x00\x85\x2d\x43\x58\xda\xbf\xfb\x79\x6a\x4e\x49\xb8\x24\x38\xbf\x1f\xb6\x3e\x18\xa9\x6e\x43\x7e\xb7\xf6\x51\x9b\x43\xee\x58\xcc\x8d\x8b\x6d\xb1\x30\x51\x18\x4d\x44\xc4\xb0\x38\xc4\x37\x2d\xdf\xfa\xac\x7e\x7d\x4f\x16\xa3\x9b\x4f\xf6\x3a\xa6\xf6\xea\xbe\x19\x28\x8f\xf6\x0f\x00\x00\xff\xff\xe1\x70\x46\x67\x5a\x00\x00\x00")

func manifests01NamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests01NamespaceYaml,
		"manifests/01-namespace.yaml",
	)
}

func manifests01NamespaceYaml() (*asset, error) {
	bytes, err := manifests01NamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/01-namespace.yaml", size: 90, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests02CrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xb1\x6a\x2c\x31\x0c\x45\x7b\x7f\x85\xbe\xc0\x8f\xe9\x1e\x6e\x93\x2e\x21\x45\x08\xe9\x95\x19\xed\xae\x58\x8f\x24\x2c\x79\xc8\xe7\x07\x7b\x77\x09\xa9\xc4\x3d\x1c\xee\x05\xa1\xf1\x27\x35\x67\x95\x02\x68\x4c\xdf\x41\x32\x92\xe7\xeb\x7f\xcf\xac\xff\x8e\xe5\x8b\x02\x97\x74\x65\xd9\x0a\x3c\x75\x0f\xdd\xdf\xc9\xb5\xb7\x95\x9e\xe9\xc4\xc2\xc1\x2a\x69\xa7\xc0\x0d\x03\x4b\x02\x10\xdc\xa9\x40\x74\xa1\xcd\xf3\x3c\x59\x8d\xc4\x2f\x7c\x8a\xcc\x9a\xdc\x68\x1d\xde\xb9\x69\xb7\xbb\xf8\xd7\xb8\x75\xf8\x90\x00\x6e\xcb\x1f\xc3\x9a\xb9\xb2\xc7\xcb\x2f\x7b\x65\x8f\xc9\xad\xf6\x86\xf5\x31\x3c\x91\xb3\x9c\x7b\xc5\x76\x87\x09\xc0\x57\x35\x2a\xf0\x36\xea\x0d\xd7\xc9\x8e\xc7\x03\x8e\x05\xab\x5d\x70\x49\x3f\x01\x00\x00\xff\xff\x50\x70\xb6\xde\x16\x01\x00\x00")

func manifests02CrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests02CrdYaml,
		"manifests/02-crd.yaml",
	)
}

func manifests02CrdYaml() (*asset, error) {
	bytes, err := manifests02CrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/02-crd.yaml", size: 278, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests03CrYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\x41\x0a\x03\x31\x08\x05\xd0\xbd\xa7\x10\x0f\x30\x65\xb6\x9e\xa3\x74\xff\x41\x87\x91\x26\x26\x34\xa6\xe7\x2f\xdd\x3f\xcc\x78\xf9\x67\xc5\x48\x65\xa9\x9d\x6e\xc7\x98\x9e\xeb\x8e\xab\x8e\x18\x8f\xef\x89\x36\x6f\x9c\x42\xef\x48\x53\x96\xe7\xdf\x08\x75\x2f\x18\x0a\x4a\xcc\x89\xee\xca\x62\x7e\x61\xb7\x12\xfa\x05\x00\x00\xff\xff\xaa\x7b\x21\x32\x54\x00\x00\x00")

func manifests03CrYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests03CrYaml,
		"manifests/03-cr.yaml",
	)
}

func manifests03CrYaml() (*asset, error) {
	bytes, err := manifests03CrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/03-cr.yaml", size: 84, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests04RbacYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xbd\x6e\x1c\x3d\x0c\xec\xf5\x14\x84\xae\xf5\xae\xe1\xee\xc3\x76\xf6\x57\x04\x6e\x82\xc0\x01\xd2\x04\x2e\x74\x12\xef\x4e\xf1\xae\xa8\x90\xd4\x25\xce\xd3\x07\xda\xfb\xf1\xfd\x3b\x4e\xe0\x6e\xc9\x95\x86\x33\x14\x87\x13\xb8\xf5\x9e\x4a\x52\x98\x11\x83\x2e\x10\x28\x23\x3b\x25\x86\xa8\x82\xfd\xac\x05\xb8\x57\x90\x05\x95\x3e\x00\xe3\xf7\x12\x19\x21\xb9\x01\x25\x3b\x8f\x20\x9e\x32\x06\x33\x81\x8c\x3c\x44\x91\x48\x49\x5a\xe3\x72\xfc\x82\x5c\x83\x0e\x96\x37\xe6\x29\xa6\xd0\xc1\x67\xe4\x65\xf4\xb8\xae\x67\x06\x54\x17\x9c\xba\xce\xc0\x88\xd7\x81\xef\x8b\x28\x72\x93\x28\x60\xa3\x25\xc5\x34\x6f\x36\x6c\x8c\x69\x9a\xc6\x98\x09\xfc\xbf\x3a\x04\x4c\x3d\x9e\xe5\xbc\x47\x80\xa7\xce\xb7\xae\xe8\x82\x38\xfe\x72\x1a\x29\xb5\x4f\xff\x49\x1b\xe9\x7a\x79\x33\x45\x75\x1b\x7e\x6b\xe4\x07\xea\xf1\xad\xe4\xe0\xa5\x23\x5d\x25\x93\x64\x11\x67\xda\x5c\xbc\xc3\xa5\x47\xe9\x4c\x03\x2e\xc7\x0f\x4c\x25\x4b\x07\x5f\xad\x96\x84\xa1\xdd\x42\xb4\x91\xec\xa3\x01\x60\x14\x2a\xec\xf1\xe5\x8c\x8c\xf9\x25\xf2\x74\xcc\xf5\x51\xd4\x5e\xd9\x1f\x4e\xfd\xc2\x3e\x1e\xa2\xba\x9c\xe5\x18\x27\x38\x1c\x28\x09\xea\x01\x96\x67\x74\x8a\xf6\xca\x06\xec\x71\xfc\x28\x39\xd4\xcc\x11\xee\xd9\xd6\x1e\x17\x5b\xf7\xa2\x3e\x9b\xd8\xab\xdd\x70\x1a\x53\x88\x69\x7e\x8e\xc4\x65\x65\x82\xbe\x70\xd4\xe7\x57\x5a\xb6\x39\xe6\x29\x29\xfe\x54\x4f\x49\x94\x5d\x4c\x87\xd2\x8b\x54\x95\x13\xb0\x16\x2a\x2b\xef\x14\x65\x9c\x30\x4f\x8c\x70\xfb\xe9\x1e\xe6\xb5\xf4\x21\x8b\x13\x72\x29\xcd\xe2\x7c\x70\xb9\x8a\xdd\x0e\x47\x0d\x64\x65\x03\xb7\xb2\xc1\x4e\xe6\xaf\x5f\xe1\xb8\x7a\x1d\xb8\x03\xb8\x39\xea\xab\xcd\x3c\x03\x74\x3d\xa0\x72\xf4\xa3\x92\x31\x96\x8c\xfe\x04\xfc\xe3\xd6\xa4\x77\x31\x85\x7d\x63\xfa\x5d\xdb\x2a\x55\xa3\x6e\x16\xc2\x66\x03\xfd\xb3\x6b\xef\x56\x83\xf4\x56\xf3\x4a\x99\x7e\x43\xaf\xa3\x17\x4f\x6e\xaa\xf7\x5b\x01\xd4\xe3\x03\xce\x2a\xcf\xe3\x15\xf4\x6e\x55\x8b\x20\x7f\xac\xb7\xaa\x60\x2b\xcf\xa2\x38\x74\xfb\x53\xd9\xfd\x19\x54\x77\xe9\xa7\x35\xbf\x03\x00\x00\xff\xff\x77\x44\x64\x3f\x5c\x06\x00\x00")

func manifests04RbacYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests04RbacYaml,
		"manifests/04-rbac.yaml",
	)
}

func manifests04RbacYaml() (*asset, error) {
	bytes, err := manifests04RbacYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/04-rbac.yaml", size: 1628, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests05OperatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4d\x6f\x9b\x40\x10\x86\xef\xfc\x8a\x91\xef\x6e\xc9\x25\x87\xbd\x21\xbc\x4d\x2d\x25\x80\x30\x69\xd5\x13\x9a\x2e\x93\x64\xd5\xfd\xd2\xee\x40\xe5\x7f\x5f\xd1\xc4\x16\x4e\xdd\x8a\xce\x09\xf1\x0e\xcf\xfb\x68\x04\x06\xfd\x85\x62\xd2\xde\x09\xc0\x10\xd2\xc7\xe9\x26\xfb\xa1\xdd\x20\x60\x47\xc1\xf8\xa3\x25\xc7\x99\x25\xc6\x01\x19\x45\x06\xe0\xd0\x92\x00\x65\xc6\xc4\x14\xb7\xce\x0f\xb4\xe5\xd1\x69\xf7\xbc\xf5\x81\x22\xb2\x8f\x59\x0a\xa4\xe6\xd5\x48\xc1\x68\x85\x49\xc0\x4d\x06\x90\xc8\x90\x62\x1f\xe7\x04\xc0\x22\xab\x97\x7b\xfc\x4e\x26\xbd\xbe\x58\x45\x06\x60\xb2\xc1\x20\xd3\x1b\x65\x21\x36\x8f\xb9\x00\xae\x44\x02\x9c\x84\x7f\x3f\x53\x9c\xb4\xa2\x42\x29\x3f\x3a\xae\xd6\x01\x00\x94\x77\x8c\xda\x51\x5c\xb4\x6f\xd7\xf6\xbf\x8e\xb6\xf8\x4c\x02\xca\xfb\xc7\x43\x27\xdb\xbe\xaa\x77\xb2\xef\x1e\xab\x7d\x75\xd7\xd7\x8d\x6c\x8b\xae\x6e\xfb\xfd\x43\x71\x27\x17\xdf\x04\x1f\x79\xd1\x38\x77\x9e\x4d\x1a\x1f\x59\xc0\x6d\x9e\xe7\xf9\x62\xe1\x74\x14\x4b\x1c\xb5\x4a\x8b\x44\x79\x6b\xd1\x0d\xef\x68\xff\xe1\xde\x8c\xc6\x34\xde\x68\x75\x14\x50\x98\x9f\x78\x5c\xd2\xc9\x4d\xe2\x42\xe3\x74\x9d\xaf\x45\x57\x7e\xee\xab\xe2\x41\x1e\x9a\xa2\x94\x17\x3b\x00\x13\x9a\x91\x3e\x45\x6f\xc5\xbb\x00\xe0\x49\x93\x19\x5a\x7a\xfa\x33\x79\xcb\x1a\xe4\x17\x71\xfe\x47\x3e\xcc\x75\x29\xa0\xa2\xab\x1a\xe7\x13\xcf\x26\xd7\x24\x04\x6c\xfe\x75\x8c\xcd\x55\x6a\x2b\x0f\xdf\xaa\xb2\x6f\x64\xbb\xaf\x77\x7f\xa1\xde\xe6\x9b\xec\x57\x00\x00\x00\xff\xff\x0f\xb3\xa5\x70\x87\x03\x00\x00")

func manifests05OperatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests05OperatorYaml,
		"manifests/05-operator.yaml",
	)
}

func manifests05OperatorYaml() (*asset, error) {
	bytes, err := manifests05OperatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/05-operator.yaml", size: 903, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned01NamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x78\x81\x03\xd1\x66\x08\x4a\x7a\x2b\xf9\x80\xc5\xe5\x3b\x8a\x7d\xcc\x8f\xa0\xa1\x7c\xd2\xd3\x69\x37\xac\x30\x67\x95\xf7\xa5\xbc\x8c\xbd\xca\x55\x07\x62\x6a\x43\x19\x48\xed\x9a\x5a\x8b\x88\x92\x9e\x9a\xe6\x8c\x2f\x45\x7c\x82\xf1\xb4\x7b\x9e\xcc\xcf\xf4\x8e\x2d\xb0\xa3\xa5\xaf\x2a\x45\x84\x3a\x50\xff\x69\x6b\xfb\x11\x89\xb5\xfd\x66\x1e\x34\x3e\xca\x27\x00\x00\xff\xff\x64\xcd\xee\x3d\x7f\x00\x00\x00")

func assetsTuned01NamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned01NamespaceYaml,
		"assets/tuned/01-namespace.yaml",
	)
}

func assetsTuned01NamespaceYaml() (*asset, error) {
	bytes, err := assetsTuned01NamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/01-namespace.yaml", size: 127, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned02ServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc7\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x78\x81\x14\xb4\xee\x98\x01\x89\xde\x72\x3e\x60\xc1\xfd\x44\x89\x73\xf3\xd3\x5c\xf9\x6c\xc4\x13\x73\x45\xa7\xca\x79\x2b\xdf\x60\x53\x79\x60\x9e\xe1\xb8\xbb\xf7\xcd\x2c\x07\xd2\x9a\xa5\x69\x11\xa1\x1d\x50\xc9\x4d\xb4\x4b\x6b\x98\x43\xa5\x0f\x70\x7d\xe2\x95\xd5\x7f\x7b\x25\x66\x65\x6f\xa8\xb9\x19\x7c\x97\x7f\x00\x00\x00\xff\xff\x65\xfe\xcc\xca\x67\x00\x00\x00")

func assetsTuned02ServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned02ServiceAccountYaml,
		"assets/tuned/02-service-account.yaml",
	)
}

func assetsTuned02ServiceAccountYaml() (*asset, error) {
	bytes, err := assetsTuned02ServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/02-service-account.yaml", size: 103, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned03ClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x3f\x4f\xfc\x30\x0c\x40\xf7\x7c\x8a\x28\xf3\xaf\xfd\x89\x0d\x65\x65\x60\x63\x60\x60\x41\x1d\x7c\xa9\x69\xad\x4b\xed\xc8\x76\xca\x9f\x4f\x8f\xae\x27\x06\x8e\xc9\xd2\xb3\xdf\x33\x34\x7a\x41\x35\x12\xce\x51\x4f\x50\x46\xe8\xbe\x8a\xd2\x17\x38\x09\x8f\xe7\x7b\x1b\x49\xfe\xef\x77\xe1\x4c\x3c\xe7\xf8\x50\xbb\x39\xea\xb3\x54\x0c\x1b\x3a\xcc\xe0\x90\x43\x8c\x0c\x1b\xe6\x58\xae\xdb\x81\x65\xc6\xc1\x3b\x13\x2f\xd9\x3b\xe3\x1c\xb4\x57\xb4\x1c\x86\x08\x8d\x1e\x55\x7a\xb3\x1c\x5f\x53\x9a\x42\x8c\x8a\x26\x5d\x0b\x1e\xe4\x62\xda\x81\x77\xd4\xd3\x81\x16\xf4\xf4\x2f\x55\xb2\xcb\x78\x07\x2f\x6b\x9a\x6e\x43\x86\xa5\x2b\xf9\xe7\x28\x0d\xd9\x56\x7a\xf3\x91\xe4\x6f\xfd\xe7\xac\x08\x3b\x7e\x78\x11\x36\x57\x20\xf6\x9b\x97\xdd\xf0\x97\xfc\x04\xdb\x35\xd0\x94\x76\xaa\xb8\xe0\x9c\xa6\xf0\x1d\x00\x00\xff\xff\x0d\x41\x2b\x61\x3b\x01\x00\x00")

func assetsTuned03ClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned03ClusterRoleYaml,
		"assets/tuned/03-cluster-role.yaml",
	)
}

func assetsTuned03ClusterRoleYaml() (*asset, error) {
	bytes, err := assetsTuned03ClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/03-cluster-role.yaml", size: 315, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned04ClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xb1\x4e\xc3\x40\x0c\xc6\xf1\xfd\x9e\xe2\x5e\x20\x41\x6c\xc8\x1b\xb0\x33\x14\x89\xdd\xbd\xfb\xda\x9a\x26\x76\x74\xf6\x55\x82\xa7\x47\x51\x2a\x16\x10\xa2\xfb\xdf\xbf\x4f\xe6\x45\xde\xd0\x5c\x4c\x29\xb7\x3d\x97\x91\x7b\x9c\xac\xc9\x27\x87\x98\x8e\xe7\x07\x1f\xc5\xee\x2e\xf7\xe9\x2c\x5a\x29\x3f\x4f\xdd\x03\x6d\x67\x13\x9e\x44\xab\xe8\x31\xcd\x08\xae\x1c\x4c\x29\x67\xe5\x19\x94\xcb\x16\x0d\x6a\x15\x43\x74\x15\x3d\x52\x74\x45\x4d\xcd\x26\xec\x70\x58\xd3\x1f\xde\x3f\xce\xb7\xc2\x17\x2e\xa0\x6c\x0b\xd4\x4f\x72\x88\xe1\x97\x83\xe4\x7d\xff\x8e\x12\x4e\x69\xb8\x4e\xbd\xa2\x5d\xa4\xe0\xb1\x14\xeb\x1a\xdf\x6b\x37\xcb\xdd\xd1\x5e\xd6\x78\xa5\xfd\xc3\x03\x33\xf9\x66\xf3\x66\xd3\x9f\xc0\xf5\x97\xaf\x00\x00\x00\xff\xff\xc1\xcb\xc9\x87\x79\x01\x00\x00")

func assetsTuned04ClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned04ClusterRoleBindingYaml,
		"assets/tuned/04-cluster-role-binding.yaml",
	)
}

func assetsTuned04ClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsTuned04ClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/04-cluster-role-binding.yaml", size: 377, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned05CmTunedProfilesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x51\x6f\xdb\x46\x0c\x7e\xf7\xaf\x20\xda\x3d\x24\x58\xa5\x45\x49\x9c\x76\x06\xb4\x97\x2c\x40\x1f\x56\xa4\x58\xba\xbd\x0c\x83\x70\x3d\x51\x16\xe1\x3b\xde\xe1\xc8\xb3\xe3\x6e\xfb\xef\x83\x14\xd9\x4e\xb2\x04\x48\x57\x3f\x59\x77\xe4\xf7\xf1\x23\x3f\x4a\x26\xd2\xef\x98\x84\x02\x2f\x60\x5d\xcd\x56\xc4\xed\x02\x2e\x03\x77\xb4\xfc\x60\xe2\xcc\xa3\x9a\xd6\xa8\x59\xcc\x00\xd8\x78\x5c\x80\x66\xc6\xb6\x88\x29\x74\xe4\x50\xa6\x63\x89\xc6\xe2\x02\x42\x44\x96\x9e\x3a\x2d\xac\xcb\xa2\x98\x0a\x0e\x2d\x16\x9a\x99\x78\x39\xdb\xe1\x3c\x44\x28\xc6\x63\xf8\x7b\x06\x00\x07\x80\xdd\x01\xc0\x1f\xde\x10\xff\x39\x3d\x48\xf6\xde\xa4\x6d\x7d\x1d\x95\x3c\x7d\x41\x90\xad\x28\x7a\x81\x94\x79\xe0\x80\xeb\x88\x7c\x33\x00\xc0\x51\x34\x09\x59\x61\xe2\x39\x9e\x10\x88\xad\xcb\x2d\xd6\xdf\xfd\xd5\x2d\xd6\x94\xb4\xb1\x3d\xda\xd5\xf8\x37\x1b\x57\x2c\x33\x8a\x2e\xb4\x4f\x21\x2f\xfb\x98\xb5\x88\x98\xba\x90\xbc\x61\x8b\xff\xcc\x76\x25\x09\x3a\xe2\x7c\xbb\xab\xca\xac\x6d\x63\x8d\xed\xb1\xd1\x3e\xa1\xf4\xc1\xb5\xf5\xbb\xea\xc7\xd3\x7d\x3c\xa3\xee\x62\xb9\x6b\x6c\x60\xd6\x64\xec\xaa\xe9\x8d\xf4\x42\x5f\xb0\xae\xce\xaa\x93\xb7\x87\x78\xd9\x8a\x55\xb7\x4f\x41\x2d\x29\xae\xcf\x4b\x8a\x4d\x17\xd2\xc6\xa4\xb6\xae\xa6\xbb\x15\x26\x46\x57\x46\x6a\x1b\x6f\x6e\xeb\x9f\x26\xa0\x43\x22\xa3\x76\xe4\x14\x53\xf9\x80\x79\x08\xae\x4e\xce\xdf\xcd\xdf\x5e\x3c\x66\x61\xa4\x65\x5f\xb6\xd8\x99\xec\xb4\x5c\xda\x49\x54\x75\x27\xe9\x65\xc1\xa7\xf5\xd9\xe9\xdb\x8b\x77\x2f\x8c\x3e\xab\x2f\xe6\xf3\xb3\x47\x85\x5c\x7c\x4d\x21\xcf\x06\x3f\x59\xc8\xb3\xd1\xf7\x0b\xb9\xe7\xe5\xc0\x9a\x82\x2b\xa2\x33\x8c\xdf\x6e\xcc\x09\x0e\x46\xb8\x47\xae\xdc\x93\x3e\x63\x85\xd7\xb0\x1a\xb6\x07\xee\x4e\x41\x50\x95\x78\x29\x6f\xc0\x9b\xdb\x81\x77\x60\xa2\x1f\x02\x1c\x0c\xbc\x4b\xdc\x03\x7c\x20\x26\x6f\x1c\xc4\x84\xe8\xa3\x52\x60\x58\x26\xc3\xd9\x99\x44\xba\x85\x2e\x24\xb8\xfc\xf8\x5b\xf1\x39\x64\x6e\x41\x8d\xac\x64\xb1\xcf\x3d\x9a\x3a\xb6\x80\x0a\xbc\xa0\x7d\x0d\x70\x54\xc1\xf7\x40\x2e\x2c\x8f\xd8\xc6\x2c\xc7\xc7\x6f\x20\x33\xa9\x2c\x80\x0d\x07\x41\x1b\xb8\x95\xe3\x87\x6e\x15\xdb\x63\xdb\x78\xe2\xe6\x1e\x73\xc3\x52\x57\x27\x77\xbf\x3d\xe1\xa7\x1e\x41\x83\x1a\x07\x4a\x1e\x41\x7b\x84\x31\x39\x3b\x4c\xb0\x21\xe7\x86\x6e\x0a\xb5\x98\xc0\x80\xa7\x65\x32\x8a\xed\xb0\xf2\x16\x45\xf6\x28\xaf\xc6\xe5\x84\x3e\xe8\x2b\x30\x83\xaa\x3e\x0b\x38\x14\x01\x47\x2b\x74\x5b\xd0\x00\x9f\x11\x12\x16\x3b\x88\x83\xe2\xbb\x39\xc2\x24\x1c\x48\x60\x3e\x96\xf8\x06\xa8\xc4\x12\x4e\xca\x39\xf8\xe7\xf4\x0d\x58\x14\xb8\xb1\x41\x74\x90\x37\x7f\xa4\xee\xe6\xf2\xfd\xd5\xcf\xcd\xf5\xa7\xf7\x57\xbf\xc2\xc6\xac\xb0\xc8\xf1\xfe\x2c\xca\xff\xcc\xee\xe3\xd3\x33\xdb\xf4\xc8\x77\xa3\x1a\x61\x20\xc7\x12\xe0\x97\xb0\xc1\x34\x76\x6c\x6d\x5c\x1e\xda\xb8\x87\x21\x1f\x53\x58\xe3\x9e\xd3\x19\x45\xb6\xdb\xa9\x37\x3b\xe7\x8c\x56\xd8\x5d\xd9\x44\x4a\x76\x98\xc3\x40\x53\x3e\xa5\x77\x40\xcb\xf1\xf1\x48\xcf\xef\x69\x3e\xac\xd4\xf0\x59\xf8\xf6\x4d\x1a\x50\xe4\x2b\x37\x68\xff\x2e\x52\x1b\x9b\xce\x88\x0e\x09\xf5\xd9\x74\xdb\x49\x49\x1c\x94\xba\x6d\xe9\xcd\x6d\x93\x05\x53\xb3\x31\x6a\x7b\x94\x27\x5f\x0d\xe3\xe7\x0d\xe5\xff\x4a\xb9\xba\x81\xc0\x2f\x15\x34\x92\x3d\xa3\x6a\xed\xc7\x7a\xbd\x89\x8d\x0d\x99\xb5\x3e\xbd\x38\xad\xce\xcf\x67\xff\x06\x00\x00\xff\xff\xf1\xd3\xac\x67\xde\x07\x00\x00")

func assetsTuned05CmTunedProfilesYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned05CmTunedProfilesYaml,
		"assets/tuned/05-cm-tuned-profiles.yaml",
	)
}

func assetsTuned05CmTunedProfilesYaml() (*asset, error) {
	bytes, err := assetsTuned05CmTunedProfilesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/05-cm-tuned-profiles.yaml", size: 2014, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned06CmTunedRecommendYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd0\x3f\x4b\x04\x31\x10\x05\xf0\x3e\x9f\x62\xc0\x4e\xf6\x0f\xb6\x81\xab\xb4\xd5\x6b\xc4\x46\x2c\x66\xb3\xb3\xbb\xe1\xb2\x93\x90\x99\x1c\x16\x7e\x78\xd9\xdc\x89\x87\x68\x21\x5c\x15\x78\x24\xbf\xf7\x08\x26\xff\x42\x59\x7c\x64\x0b\xc7\x3b\x73\xf0\x3c\x5a\xb8\x8f\x3c\xf9\xf9\x11\x93\x59\x49\x71\x44\x45\x6b\x00\x18\x57\xb2\xa0\x85\x69\x6c\x33\xb9\xb8\xae\xc4\xe3\x39\x97\x84\x8e\x2c\xc4\x44\x2c\x8b\x9f\xb4\x75\xa1\x88\x52\x6e\x39\x8e\xd4\x6a\x61\xcf\xb3\xf9\x82\x4e\x44\x74\xe9\x9b\xb1\xf0\x61\x00\x00\x5e\x2f\x84\xc8\x9a\x63\x68\x53\x40\xa6\x66\xc5\x8d\x7b\xab\x97\xfa\x23\xe6\x3e\xf8\xa1\xaf\x50\xbf\x41\xb5\x26\xe0\x40\x41\x3a\x37\xcd\xbb\xee\xb6\x26\x39\x06\xea\x0e\x65\xa0\xcc\xa4\x24\x9d\x8f\xfd\x09\xda\x69\x2e\x64\xaa\x76\x03\x4f\x11\xa4\xb8\x05\xea\x7b\xa0\x77\x2f\x2a\x0d\x3c\xef\x1f\xf6\x3f\x37\x55\x94\xa4\x39\x9f\x57\x98\x43\x01\x45\xbd\x13\xc2\xec\x96\x8b\x55\x7f\x7e\xc4\x06\x5d\xa1\xd7\xf3\x94\xf1\xf7\xbe\x7f\x36\x98\xcf\x00\x00\x00\xff\xff\xfe\xb3\x5a\x52\x43\x02\x00\x00")

func assetsTuned06CmTunedRecommendYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned06CmTunedRecommendYaml,
		"assets/tuned/06-cm-tuned-recommend.yaml",
	)
}

func assetsTuned06CmTunedRecommendYaml() (*asset, error) {
	bytes, err := assetsTuned06CmTunedRecommendYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/06-cm-tuned-recommend.yaml", size: 579, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned07DsTunedYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xcb\x8f\xfa\x36\x10\xbe\xf3\x57\x8c\xf6\x6e\xb2\x55\xd5\x1e\x72\x43\x3c\xb6\x2b\x95\x87\x96\x6d\xa5\x9e\x90\xb1\x07\xb0\xf0\x23\xb2\xc7\xd9\xa2\xaa\xff\x7b\x65\x08\x21\x21\x84\xad\x7e\xb9\xec\xe2\xf9\xe6\x9b\x19\x7f\x33\x63\x5e\xa8\x3f\xd1\x07\xe5\x6c\x0e\xbc\x28\x42\x56\xfe\x34\x38\x2a\x2b\x73\x98\x70\x34\xce\xae\x91\x06\x06\x89\x4b\x4e\x3c\x1f\x00\x58\x6e\x30\x07\x8a\x16\x65\xf5\x2b\x14\x5c\x60\x0e\xae\x40\x1b\x0e\x6a\x47\x4c\xe8\x18\x08\x3d\xb3\x4e\x22\xa3\x68\x95\xdd\x0f\x00\x34\xdf\xa2\x0e\x89\x02\x1a\x58\x5e\x14\x57\xb6\x50\xa0\x48\xe6\x80\x1a\x05\x39\x7f\x81\x1a\x4e\xe2\xf0\x7b\xc3\xb7\xc7\x1b\x80\xd0\x14\x9a\x13\x56\x7e\x8d\x9c\xd3\xa7\x5b\x14\xbd\x24\x00\xd7\x34\xce\xff\xa3\x2f\x95\xc0\x91\x10\x2e\x5a\x5a\xb4\x4a\x4f\x1f\x8f\xe4\x4c\x32\xad\x5b\xc0\x4f\x77\x44\x9b\x03\xf9\x88\x15\x50\x38\x4b\x5c\x59\xf4\x75\x06\x0c\x84\x33\x86\x5b\x79\x4b\x89\x41\x56\x72\x9f\x69\xb5\xcd\xce\x41\xb2\xad\xb2\x99\x8f\xb6\x06\x28\xc3\xf7\x98\xc3\x72\x35\x5d\xac\x7f\x7b\x9f\x7d\x6e\x3e\xff\x58\x4c\x27\x9b\xf7\xf9\xe8\x6d\xda\x06\xad\xa2\xd6\x2b\xa7\x95\x38\xe5\x30\xd2\x5f\xfc\x14\x6a\xbb\xed\x54\x01\xe0\x31\xb8\xe8\x05\x86\x1c\xfe\xf9\xb7\x3e\x0d\x28\xa2\x57\x74\x1a\x3b\x4b\xf8\x37\xdd\x12\x05\x28\xbc\x2a\x95\xc6\x3d\xca\x56\x99\x49\x04\x6f\x94\xe5\xa4\x9c\x9d\x63\x08\x29\x15\x4e\x87\x1c\x32\x89\x65\xd6\x30\x32\xed\xf6\xcf\x9c\xaa\xdc\x67\x4a\xdf\xb8\x4b\xa7\xa3\xc1\x79\xba\xe1\xd0\xbc\xb5\xb3\x02\x55\x18\x24\x51\x5d\x9e\xc7\x74\xc1\x68\xe5\x50\x36\x12\xbf\x54\x8f\x24\xd8\x19\xc5\x6a\x54\x0f\x5f\x5b\x90\xc2\xbb\x9d\xd2\x18\x58\xea\xac\x0e\x6b\xc9\x3d\xd3\x6a\x5b\x31\x3f\xc6\xb6\xd9\x43\x43\x97\x2b\x4b\xf3\xac\x9b\x8b\x8f\x36\x93\xdb\xd8\x75\x4b\xc1\x7d\xb4\xec\xce\xe8\x91\xcb\xa5\xd5\xa7\x3b\x99\xda\xc4\x89\x34\x9c\x02\xa1\x91\xd5\xdf\x0e\x7d\xa2\xae\x20\xac\x03\xe9\x09\x82\xb6\x6c\xf6\x0c\xab\xa8\x96\xe3\xd5\x66\xb1\x9c\x4c\x37\x8b\xd1\x7c\xda\xb0\x03\x94\x5c\x47\x9c\x79\x67\xf2\xd6\x31\xc0\x4e\xa1\x96\x1f\xb8\xbb\x3f\xaf\x2c\x97\x32\xd2\xe0\x0e\xd3\xce\x49\x73\xfa\x20\xee\xc7\x74\xfd\xd7\x62\xbc\x59\x4d\x3f\xde\x97\x93\x6e\xdc\x1c\x5e\x7e\x7d\x7d\xa9\xce\x2f\xad\xd6\x18\xd6\x83\x0b\x97\xdb\x6a\x0e\x41\x57\xc4\x7b\x09\x9f\x3a\x3e\xd4\xb3\x57\xcd\xa7\x54\x4f\x14\xfc\x46\xbf\xb4\x87\xec\x4e\xed\xe7\xbc\x68\xf2\x2a\x42\x13\xda\xea\x1d\xf1\x54\xed\x0d\xe6\x44\xf1\x60\x72\x6e\xf9\xfc\xf2\xca\xea\xfd\x3a\x4c\xfc\x9d\x7e\xea\x9b\xbe\xb4\x98\xd3\x1e\xe0\xfa\xae\x99\xbe\x1b\xdc\x1f\xaa\xa3\x6f\x9e\xaf\x75\xb4\x51\xc3\x13\x37\xba\xa7\x92\x2b\xe6\xff\x16\xf2\xfd\xae\x90\x36\x5c\xb7\xe0\xf8\xf2\xa0\xce\x94\x0f\x54\x59\x53\x2f\x2c\x90\xbe\x9c\x3f\xb6\xf8\x3d\x06\xe2\x9e\x1e\xee\xfe\x20\x0e\x28\xa3\x46\x7f\x79\xc8\x24\xee\x78\xd4\xc4\xea\xe3\xfa\xd1\x6b\xaf\xfd\xdb\x93\xd0\xd8\xd3\x6f\x9e\x0b\x5c\xa1\x57\x4e\xae\x51\x38\x2b\x43\x0e\x3f\xbf\x0e\xfe\x0b\x00\x00\xff\xff\x8a\x88\x0b\x27\x4e\x08\x00\x00")

func assetsTuned07DsTunedYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned07DsTunedYaml,
		"assets/tuned/07-ds-tuned.yaml",
	)
}

func assetsTuned07DsTunedYaml() (*asset, error) {
	bytes, err := assetsTuned07DsTunedYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/07-ds-tuned.yaml", size: 2126, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"manifests/01-namespace.yaml": manifests01NamespaceYaml,
	"manifests/02-crd.yaml": manifests02CrdYaml,
	"manifests/03-cr.yaml": manifests03CrYaml,
	"manifests/04-rbac.yaml": manifests04RbacYaml,
	"manifests/05-operator.yaml": manifests05OperatorYaml,
	"assets/tuned/01-namespace.yaml": assetsTuned01NamespaceYaml,
	"assets/tuned/02-service-account.yaml": assetsTuned02ServiceAccountYaml,
	"assets/tuned/03-cluster-role.yaml": assetsTuned03ClusterRoleYaml,
	"assets/tuned/04-cluster-role-binding.yaml": assetsTuned04ClusterRoleBindingYaml,
	"assets/tuned/05-cm-tuned-profiles.yaml": assetsTuned05CmTunedProfilesYaml,
	"assets/tuned/06-cm-tuned-recommend.yaml": assetsTuned06CmTunedRecommendYaml,
	"assets/tuned/07-ds-tuned.yaml": assetsTuned07DsTunedYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"tuned": &bintree{nil, map[string]*bintree{
			"01-namespace.yaml": &bintree{assetsTuned01NamespaceYaml, map[string]*bintree{}},
			"02-service-account.yaml": &bintree{assetsTuned02ServiceAccountYaml, map[string]*bintree{}},
			"03-cluster-role.yaml": &bintree{assetsTuned03ClusterRoleYaml, map[string]*bintree{}},
			"04-cluster-role-binding.yaml": &bintree{assetsTuned04ClusterRoleBindingYaml, map[string]*bintree{}},
			"05-cm-tuned-profiles.yaml": &bintree{assetsTuned05CmTunedProfilesYaml, map[string]*bintree{}},
			"06-cm-tuned-recommend.yaml": &bintree{assetsTuned06CmTunedRecommendYaml, map[string]*bintree{}},
			"07-ds-tuned.yaml": &bintree{assetsTuned07DsTunedYaml, map[string]*bintree{}},
		}},
	}},
	"manifests": &bintree{nil, map[string]*bintree{
		"01-namespace.yaml": &bintree{manifests01NamespaceYaml, map[string]*bintree{}},
		"02-crd.yaml": &bintree{manifests02CrdYaml, map[string]*bintree{}},
		"03-cr.yaml": &bintree{manifests03CrYaml, map[string]*bintree{}},
		"04-rbac.yaml": &bintree{manifests04RbacYaml, map[string]*bintree{}},
		"05-operator.yaml": &bintree{manifests05OperatorYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

