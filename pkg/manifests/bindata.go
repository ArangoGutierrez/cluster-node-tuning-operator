// Code generated by go-bindata.
// sources:
// manifests/01-namespace.yaml
// manifests/02-crd.yaml
// manifests/03-cr.yaml
// manifests/04-rbac.yaml
// manifests/05-operator.yaml
// manifests/image-references
// assets/tuned/01-namespace.yaml
// assets/tuned/02-service-account.yaml
// assets/tuned/03-cluster-role.yaml
// assets/tuned/04-cluster-role-binding.yaml
// assets/tuned/05-cm-tuned-profiles.yaml
// assets/tuned/06-cm-tuned-recommend.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _manifests01NamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x11\x82\x21\x0c\x05\xe0\x9e\x29\xb2\x00\x85\x2d\x43\x58\xda\xbf\xfb\x79\x6a\x4e\x49\xb8\x24\x38\xbf\x1f\xb6\x3e\x18\xa9\x6e\x43\x7e\xb7\xf6\x51\x9b\x43\xee\x58\xcc\x8d\x8b\x6d\xb1\x30\x51\x18\x4d\x44\xc4\xb0\x38\xc4\x37\x2d\xdf\xfa\xac\x7e\x7d\x4f\x16\xa3\x9b\x4f\xf6\x3a\xa6\xf6\xea\xbe\x19\x28\x8f\xf6\x0f\x00\x00\xff\xff\xe1\x70\x46\x67\x5a\x00\x00\x00")

func manifests01NamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests01NamespaceYaml,
		"manifests/01-namespace.yaml",
	)
}

func manifests01NamespaceYaml() (*asset, error) {
	bytes, err := manifests01NamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/01-namespace.yaml", size: 90, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests02CrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xb1\x6a\x2c\x31\x0c\x45\x7b\x7f\x85\xbe\xc0\x8f\xe9\x1e\x6e\x93\x2e\x21\x45\x08\xe9\x95\x19\xed\xae\x58\x8f\x24\x2c\x79\xc8\xe7\x07\x7b\x77\x09\xa9\xc4\x3d\x1c\xee\x05\xa1\xf1\x27\x35\x67\x95\x02\x68\x4c\xdf\x41\x32\x92\xe7\xeb\x7f\xcf\xac\xff\x8e\xe5\x8b\x02\x97\x74\x65\xd9\x0a\x3c\x75\x0f\xdd\xdf\xc9\xb5\xb7\x95\x9e\xe9\xc4\xc2\xc1\x2a\x69\xa7\xc0\x0d\x03\x4b\x02\x10\xdc\xa9\x40\x74\xa1\xcd\xf3\x3c\x59\x8d\xc4\x2f\x7c\x8a\xcc\x9a\xdc\x68\x1d\xde\xb9\x69\xb7\xbb\xf8\xd7\xb8\x75\xf8\x90\x00\x6e\xcb\x1f\xc3\x9a\xb9\xb2\xc7\xcb\x2f\x7b\x65\x8f\xc9\xad\xf6\x86\xf5\x31\x3c\x91\xb3\x9c\x7b\xc5\x76\x87\x09\xc0\x57\x35\x2a\xf0\x36\xea\x0d\xd7\xc9\x8e\xc7\x03\x8e\x05\xab\x5d\x70\x49\x3f\x01\x00\x00\xff\xff\x50\x70\xb6\xde\x16\x01\x00\x00")

func manifests02CrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests02CrdYaml,
		"manifests/02-crd.yaml",
	)
}

func manifests02CrdYaml() (*asset, error) {
	bytes, err := manifests02CrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/02-crd.yaml", size: 278, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests03CrYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\x31\x17\x48\xa5\xdb\x9c\x43\xdc\x3f\x9a\x57\x3b\xd8\xce\x84\x64\xe2\xf9\x45\x10\x97\x3f\xfc\x7c\x68\xfa\x60\x1f\xea\x56\x24\xa6\xb1\x2e\xde\x68\xe3\xd0\x3d\x16\xf5\xdb\x7b\xc5\xd9\x0e\xac\xe9\xa5\x56\x8b\xdc\xbf\x47\xba\x18\xa8\x08\x94\x24\x62\xb8\x58\xa4\x72\xc7\x3c\xe3\xd7\xa3\x61\x63\x91\x3f\x94\xb7\x73\x8e\x60\xcf\xe6\x95\x39\xa6\xa9\x3d\xb3\x37\x76\x84\xf7\xf4\x09\x00\x00\xff\xff\x46\xaf\x71\xac\x82\x00\x00\x00")

func manifests03CrYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests03CrYaml,
		"manifests/03-cr.yaml",
	)
}

func manifests03CrYaml() (*asset, error) {
	bytes, err := manifests03CrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/03-cr.yaml", size: 130, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests04RbacYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x3d\x6f\xdb\x40\x0c\xdd\xf5\x2b\x88\xf3\x1a\x29\xc8\x56\x68\x4b\x3a\x14\x59\x8a\x22\x05\xba\x14\x19\xce\x27\xda\x66\x23\x1d\xaf\x24\xcf\x6d\xfa\xeb\x8b\x93\x3f\xea\xef\xf4\x03\xe9\x66\xd2\xd4\xe3\x7b\x3c\x3e\x4e\xe0\x36\x04\xce\xd1\x60\xc6\x02\xb6\x40\xe0\x84\xe2\x8d\x05\xc8\x14\xfb\x59\x03\x70\x6f\xa0\x0b\xce\x7d\x07\x82\x5f\x33\x09\x42\xf4\x03\x6a\xf2\x01\x41\x03\x27\xec\xaa\x09\x24\x94\x81\x54\x89\xa3\x36\x95\x4f\xf4\x09\xa5\x04\x2d\x2c\x6f\xaa\x27\x8a\x5d\x0b\x1f\x51\x96\x14\x70\xdd\xaf\x1a\xd0\x7c\xe7\xcd\xb7\x15\x8c\x78\x2d\x84\x3e\xab\xa1\xd4\x91\x3b\xac\x2d\x47\x8a\xf3\x7a\xc3\x66\x5d\x34\x36\x6d\x0b\xc7\xa8\x0b\x9a\x59\x7d\xf1\x9b\xaa\xae\xeb\xaa\x9a\xc0\xdb\x55\x11\x08\xf7\x78\x56\xe7\x1e\x69\x99\xfa\xd0\xf8\x6c\x0b\x16\xfa\xe1\x8d\x38\x36\x4f\x6f\xb4\x21\xbe\x5e\xde\x4c\xd1\xfc\x46\xd3\x1a\xf9\x81\x7b\xfc\x1f\x82\x24\xf7\xa8\x6d\x55\x83\x4f\xf4\x4e\x38\x27\x6d\xe1\xb3\xb3\x1c\xb1\x6b\xb6\x10\x0d\xb1\x7b\xac\x00\x04\x95\xb3\x04\xfc\x55\xa3\x63\x7e\x89\x32\x1d\x73\x3d\xa9\xb9\x2b\xf7\xcd\x5b\x58\xb8\xc7\x43\x54\x9f\x92\x1e\xe3\x74\x1e\x07\x8e\x8a\x76\x80\x15\x04\xbd\xa1\xbb\x72\x1d\xf6\x38\xfe\xc8\xa9\x2b\x99\x23\xdc\xb3\xa3\x3d\x6e\xb6\x9e\x45\x79\x36\x75\x57\xbb\xe1\x94\x62\x47\x71\x7e\x8e\xc4\x65\x65\x8a\x21\x0b\xd9\xf3\x0b\x23\xdb\x94\x05\x8e\x86\xdf\x2d\x70\x54\x13\x4f\xf1\x50\x7a\xd6\xa2\x72\x02\xce\x41\x61\x15\xbc\xa1\x8e\x1b\x16\x58\x10\x6e\x3f\xdc\xc3\xbc\xb4\x3e\x64\x71\x42\x2e\xc7\x19\xcd\x07\x9f\x8a\xd8\xed\x72\x94\x40\x57\xd6\xf1\x2b\xeb\xec\x64\xfe\xfa\x15\x8e\xbb\x97\x85\x3b\x80\x9b\xa3\xbd\x38\xcc\x33\x40\xd7\x03\x9a\x50\x18\x95\x8c\xb1\x26\x0c\x27\xe0\x1f\xb7\x26\xbd\xa3\xd8\xed\x1b\x33\xec\xda\xd6\xb8\x18\x75\x73\x44\x36\x57\xeb\x9f\x5d\x7b\xb7\x5a\xa4\x3f\x35\xaf\xe6\xe9\x17\x0c\x36\x7a\xf1\xe4\x75\x7b\xbd\x13\xc0\x3d\x3e\xe0\xac\xf0\x3c\x3e\x41\xaf\xd6\x35\x2b\xca\xfb\xf2\x55\x11\xec\xf4\x59\x0d\x87\x76\x7f\x2b\xdb\xdf\x83\x6a\x2f\xfd\xe9\xaa\x9f\x01\x00\x00\xff\xff\xc7\xaa\x83\x65\x90\x06\x00\x00")

func manifests04RbacYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests04RbacYaml,
		"manifests/04-rbac.yaml",
	)
}

func manifests04RbacYaml() (*asset, error) {
	bytes, err := manifests04RbacYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/04-rbac.yaml", size: 1680, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests05OperatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\x6a\xdb\x40\x10\x87\xef\x7e\x8a\x21\x77\x29\x0a\x94\x1c\xf6\x26\x6c\xb5\x0d\x24\xb2\x90\x9d\x96\x9e\xc4\x74\x35\x96\x97\xee\x3f\x76\x47\x2a\x7e\xfb\xe2\xc4\x16\x72\xea\x04\x15\xba\x27\x5b\xbf\xd9\x6f\xbe\x1d\x06\xbd\xfa\x46\x21\x2a\x67\x05\xa0\xf7\xf1\x76\xb8\x5b\xfc\x52\xb6\x15\xb0\x22\xaf\xdd\xc1\x90\xe5\x85\x21\xc6\x16\x19\xc5\x02\xc0\xa2\x21\x01\x52\xf7\x91\x29\x24\xd6\xb5\x94\x70\x6f\x95\xed\x12\xe7\x29\x20\xbb\x70\x2a\x8a\x1e\x25\x09\x70\x9e\x6c\xdc\xab\x1d\x27\x1f\xde\x89\x9e\xe4\x11\x1f\xc8\x6b\x25\x31\x0a\xb8\x5b\x00\x44\xd2\x24\xd9\x85\x63\x02\x60\x90\xe5\xfe\x11\x7f\x92\x8e\xaf\x1f\x66\xda\x30\x19\xaf\x91\xe9\x44\x99\x3c\xe6\x78\xf4\x05\x70\x26\x12\xe0\x2c\xfc\xf2\x9b\xc2\xa0\x24\xe5\x52\xba\xde\x72\x39\x0f\x00\x20\x9d\x65\x54\x96\xc2\xa4\x7b\x32\xb7\xff\xeb\x51\x06\x3b\x12\x10\xa8\x53\x91\xc3\x21\x8d\x83\x4c\xa5\x4a\xc7\xa1\xa7\x2e\x74\xb7\xe3\xbf\x5b\x17\x54\xa7\x6c\x32\x7c\x4a\x33\x31\xb3\x83\x77\x81\x27\x7e\x47\xc3\xd1\xbb\x72\x81\x05\xdc\x67\x59\x96\x4d\x0a\xce\x23\x34\xc4\x41\xc9\x38\x49\xa4\x33\x06\x6d\xfb\x86\xf6\x0f\x2f\xad\x7a\xad\x2b\xa7\x95\x3c\x08\xc8\xf5\x6f\x3c\x4c\xe9\x64\x07\x71\xa1\x71\x9e\xe5\xf7\x7c\xbb\xfc\xda\x94\xf9\x53\xb1\xa9\xf2\x65\x71\x51\x03\x30\xa0\xee\xe9\x73\x70\x46\xbc\x09\x00\x76\x8a\x74\x5b\xd3\xee\xef\xe4\x94\x55\xc8\x7b\x31\x6e\x54\x3a\xae\xfd\x55\x8d\x75\x55\xd4\xf9\x76\x5d\xbf\x98\x5c\x93\x10\x70\xf3\xd1\x30\x6e\xae\x52\xeb\x62\xf3\xa3\x5c\x36\x55\x51\x3f\xac\x57\xef\x50\xef\xb3\xeb\x77\x97\x8f\xcf\x9b\x6d\x51\x37\xe5\x7a\x55\x34\xdb\xe7\xb2\x58\x35\x0f\x4f\xf9\x97\x77\xe4\xfe\xc7\x92\x51\xbb\xf8\x13\x00\x00\xff\xff\x0c\x17\x17\x14\x72\x04\x00\x00")

func manifests05OperatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests05OperatorYaml,
		"manifests/05-operator.yaml",
	)
}

func manifests05OperatorYaml() (*asset, error) {
	bytes, err := manifests05OperatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/05-operator.yaml", size: 1138, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsImageReferences = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x8e\xb1\x8e\xc2\x30\x0c\x86\xf7\x3c\x85\x5f\x20\xe9\x9d\x74\x53\xe6\x5b\x98\x91\xd8\xa3\xc4\x0d\x56\x89\x1d\x39\x69\x25\xde\x1e\xb5\x85\x8a\x8d\x91\xc9\xf6\x2f\xdb\xdf\x37\x11\x27\x0f\xa7\x12\x32\x9e\xbb\x62\x28\x26\x54\xba\xa0\x36\x12\xf6\x40\x6b\xee\xa4\x22\xb7\x2b\x8d\xdd\x91\x0c\xcb\xaf\x69\x15\xa3\x37\x00\x3d\xe4\xb6\x56\x0b\x1c\x0a\x7a\x88\xb7\xb9\x75\x54\xcb\x92\xd0\xf6\x99\x89\xb3\x95\x8a\x1a\xba\xa8\x01\x00\x18\x55\x8a\xdf\x3a\x80\x1d\xfc\x2f\x71\x42\xdd\xf0\xcf\x7c\x7f\xa5\x98\xa9\x75\xbd\xbb\xb6\x44\x17\xe9\x4d\x41\x34\x0f\xc7\x34\x88\x52\x26\xb6\xcb\x9f\xfb\xf1\x1f\xf0\x2f\xcb\xe3\x78\xdd\xc1\xf4\x05\x31\x4c\xe6\x11\x00\x00\xff\xff\x7c\xc5\x8e\x4e\x77\x01\x00\x00")

func manifestsImageReferencesBytes() ([]byte, error) {
	return bindataRead(
		_manifestsImageReferences,
		"manifests/image-references",
	)
}

func manifestsImageReferences() (*asset, error) {
	bytes, err := manifestsImageReferencesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/image-references", size: 375, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned01NamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x78\x81\x03\xd1\x66\x08\x4a\x7a\x2b\xf9\x80\xc5\xe5\x3b\x8a\x7d\xcc\x8f\xa0\xa1\x7c\xd2\xd3\x69\x37\xac\x30\x67\x95\xf7\xa5\xbc\x8c\xbd\xca\x55\x07\x62\x6a\x43\x19\x48\xed\x9a\x5a\x8b\x88\x92\x9e\x9a\xe6\x8c\x2f\x45\x7c\x82\xf1\xb4\x7b\x9e\xcc\xcf\xf4\x8e\x2d\xb0\xa3\xa5\xaf\x2a\x45\x84\x3a\x50\xff\x69\x6b\xfb\x11\x89\xb5\xfd\x66\x1e\x34\x3e\xca\x27\x00\x00\xff\xff\x64\xcd\xee\x3d\x7f\x00\x00\x00")

func assetsTuned01NamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned01NamespaceYaml,
		"assets/tuned/01-namespace.yaml",
	)
}

func assetsTuned01NamespaceYaml() (*asset, error) {
	bytes, err := assetsTuned01NamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/01-namespace.yaml", size: 127, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned02ServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc7\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x78\x81\x14\xb4\xee\x98\x01\x89\xde\x72\x3e\x60\xc1\xfd\x44\x89\x73\xf3\xd3\x5c\xf9\x6c\xc4\x13\x73\x45\xa7\xca\x79\x2b\xdf\x60\x53\x79\x60\x9e\xe1\xb8\xbb\xf7\xcd\x2c\x07\xd2\x9a\xa5\x69\x11\xa1\x1d\x50\xc9\x4d\xb4\x4b\x6b\x98\x43\xa5\x0f\x70\x7d\xe2\x95\xd5\x7f\x7b\x25\x66\x65\x6f\xa8\xb9\x19\x7c\x97\x7f\x00\x00\x00\xff\xff\x65\xfe\xcc\xca\x67\x00\x00\x00")

func assetsTuned02ServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned02ServiceAccountYaml,
		"assets/tuned/02-service-account.yaml",
	)
}

func assetsTuned02ServiceAccountYaml() (*asset, error) {
	bytes, err := assetsTuned02ServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/02-service-account.yaml", size: 103, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned03ClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x3f\x4f\xfc\x30\x0c\x40\xf7\x7c\x8a\x28\xf3\xaf\xfd\x89\x0d\x65\x65\x60\x63\x60\x60\x41\x1d\x7c\xa9\x69\xad\x4b\xed\xc8\x76\xca\x9f\x4f\x8f\xae\x27\x06\x8e\xc9\xd2\xb3\xdf\x33\x34\x7a\x41\x35\x12\xce\x51\x4f\x50\x46\xe8\xbe\x8a\xd2\x17\x38\x09\x8f\xe7\x7b\x1b\x49\xfe\xef\x77\xe1\x4c\x3c\xe7\xf8\x50\xbb\x39\xea\xb3\x54\x0c\x1b\x3a\xcc\xe0\x90\x43\x8c\x0c\x1b\xe6\x58\xae\xdb\x81\x65\xc6\xc1\x3b\x13\x2f\xd9\x3b\xe3\x1c\xb4\x57\xb4\x1c\x86\x08\x8d\x1e\x55\x7a\xb3\x1c\x5f\x53\x9a\x42\x8c\x8a\x26\x5d\x0b\x1e\xe4\x62\xda\x81\x77\xd4\xd3\x81\x16\xf4\xf4\x2f\x55\xb2\xcb\x78\x07\x2f\x6b\x9a\x6e\x43\x86\xa5\x2b\xf9\xe7\x28\x0d\xd9\x56\x7a\xf3\x91\xe4\x6f\xfd\xe7\xac\x08\x3b\x7e\x78\x11\x36\x57\x20\xf6\x9b\x97\xdd\xf0\x97\xfc\x04\xdb\x35\xd0\x94\x76\xaa\xb8\xe0\x9c\xa6\xf0\x1d\x00\x00\xff\xff\x0d\x41\x2b\x61\x3b\x01\x00\x00")

func assetsTuned03ClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned03ClusterRoleYaml,
		"assets/tuned/03-cluster-role.yaml",
	)
}

func assetsTuned03ClusterRoleYaml() (*asset, error) {
	bytes, err := assetsTuned03ClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/03-cluster-role.yaml", size: 315, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned04ClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xb1\x4e\xc3\x40\x0c\xc6\xf1\xfd\x9e\xe2\x5e\x20\x41\x6c\xc8\x1b\xb0\x33\x14\x89\xdd\xbd\xfb\xda\x9a\x26\x76\x74\xf6\x55\x82\xa7\x47\x51\x2a\x16\x10\xa2\xfb\xdf\xbf\x4f\xe6\x45\xde\xd0\x5c\x4c\x29\xb7\x3d\x97\x91\x7b\x9c\xac\xc9\x27\x87\x98\x8e\xe7\x07\x1f\xc5\xee\x2e\xf7\xe9\x2c\x5a\x29\x3f\x4f\xdd\x03\x6d\x67\x13\x9e\x44\xab\xe8\x31\xcd\x08\xae\x1c\x4c\x29\x67\xe5\x19\x94\xcb\x16\x0d\x6a\x15\x43\x74\x15\x3d\x52\x74\x45\x4d\xcd\x26\xec\x70\x58\xd3\x1f\xde\x3f\xce\xb7\xc2\x17\x2e\xa0\x6c\x0b\xd4\x4f\x72\x88\xe1\x97\x83\xe4\x7d\xff\x8e\x12\x4e\x69\xb8\x4e\xbd\xa2\x5d\xa4\xe0\xb1\x14\xeb\x1a\xdf\x6b\x37\xcb\xdd\xd1\x5e\xd6\x78\xa5\xfd\xc3\x03\x33\xf9\x66\xf3\x66\xd3\x9f\xc0\xf5\x97\xaf\x00\x00\x00\xff\xff\xc1\xcb\xc9\x87\x79\x01\x00\x00")

func assetsTuned04ClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned04ClusterRoleBindingYaml,
		"assets/tuned/04-cluster-role-binding.yaml",
	)
}

func assetsTuned04ClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsTuned04ClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/04-cluster-role-binding.yaml", size: 377, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned05CmTunedProfilesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x51\x6f\xdb\x46\x0c\x7e\xf7\xaf\x20\xda\x3d\x24\x58\xa5\x45\x49\x9c\x76\x06\xb4\x97\x2c\x40\x1f\x56\xa4\x58\xba\xbd\x0c\x83\x70\x3d\x51\x16\xe1\x3b\xde\xe1\xc8\xb3\xe3\x6e\xfb\xef\x83\x14\xd9\x4e\xb2\x04\x48\x57\x3f\x59\x77\xe4\xf7\xf1\x23\x3f\x4a\x26\xd2\xef\x98\x84\x02\x2f\x60\x5d\xcd\x56\xc4\xed\x02\x2e\x03\x77\xb4\xfc\x60\xe2\xcc\xa3\x9a\xd6\xa8\x59\xcc\x00\xd8\x78\x5c\x80\x66\xc6\xb6\x88\x29\x74\xe4\x50\xa6\x63\x89\xc6\xe2\x02\x42\x44\x96\x9e\x3a\x2d\xac\xcb\xa2\x98\x0a\x0e\x2d\x16\x9a\x99\x78\x39\xdb\xe1\x3c\x44\x28\xc6\x63\xf8\x7b\x06\x00\x07\x80\xdd\x01\xc0\x1f\xde\x10\xff\x39\x3d\x48\xf6\xde\xa4\x6d\x7d\x1d\x95\x3c\x7d\x41\x90\xad\x28\x7a\x81\x94\x79\xe0\x80\xeb\x88\x7c\x33\x00\xc0\x51\x34\x09\x59\x61\xe2\x39\x9e\x10\x88\xad\xcb\x2d\xd6\xdf\xfd\xd5\x2d\xd6\x94\xb4\xb1\x3d\xda\xd5\xf8\x37\x1b\x57\x2c\x33\x8a\x2e\xb4\x4f\x21\x2f\xfb\x98\xb5\x88\x98\xba\x90\xbc\x61\x8b\xff\xcc\x76\x25\x09\x3a\xe2\x7c\xbb\xab\xca\xac\x6d\x63\x8d\xed\xb1\xd1\x3e\xa1\xf4\xc1\xb5\xf5\xbb\xea\xc7\xd3\x7d\x3c\xa3\xee\x62\xb9\x6b\x6c\x60\xd6\x64\xec\xaa\xe9\x8d\xf4\x42\x5f\xb0\xae\xce\xaa\x93\xb7\x87\x78\xd9\x8a\x55\xb7\x4f\x41\x2d\x29\xae\xcf\x4b\x8a\x4d\x17\xd2\xc6\xa4\xb6\xae\xa6\xbb\x15\x26\x46\x57\x46\x6a\x1b\x6f\x6e\xeb\x9f\x26\xa0\x43\x22\xa3\x76\xe4\x14\x53\xf9\x80\x79\x08\xae\x4e\xce\xdf\xcd\xdf\x5e\x3c\x66\x61\xa4\x65\x5f\xb6\xd8\x99\xec\xb4\x5c\xda\x49\x54\x75\x27\xe9\x65\xc1\xa7\xf5\xd9\xe9\xdb\x8b\x77\x2f\x8c\x3e\xab\x2f\xe6\xf3\xb3\x47\x85\x5c\x7c\x4d\x21\xcf\x06\x3f\x59\xc8\xb3\xd1\xf7\x0b\xb9\xe7\xe5\xc0\x9a\x82\x2b\xa2\x33\x8c\xdf\x6e\xcc\x09\x0e\x46\xb8\x47\xae\xdc\x93\x3e\x63\x85\xd7\xb0\x1a\xb6\x07\xee\x4e\x41\x50\x95\x78\x29\x6f\xc0\x9b\xdb\x81\x77\x60\xa2\x1f\x02\x1c\x0c\xbc\x4b\xdc\x03\x7c\x20\x26\x6f\x1c\xc4\x84\xe8\xa3\x52\x60\x58\x26\xc3\xd9\x99\x44\xba\x85\x2e\x24\xb8\xfc\xf8\x5b\xf1\x39\x64\x6e\x41\x8d\xac\x64\xb1\xcf\x3d\x9a\x3a\xb6\x80\x0a\xbc\xa0\x7d\x0d\x70\x54\xc1\xf7\x40\x2e\x2c\x8f\xd8\xc6\x2c\xc7\xc7\x6f\x20\x33\xa9\x2c\x80\x0d\x07\x41\x1b\xb8\x95\xe3\x87\x6e\x15\xdb\x63\xdb\x78\xe2\xe6\x1e\x73\xc3\x52\x57\x27\x77\xbf\x3d\xe1\xa7\x1e\x41\x83\x1a\x07\x4a\x1e\x41\x7b\x84\x31\x39\x3b\x4c\xb0\x21\xe7\x86\x6e\x0a\xb5\x98\xc0\x80\xa7\x65\x32\x8a\xed\xb0\xf2\x16\x45\xf6\x28\xaf\xc6\xe5\x84\x3e\xe8\x2b\x30\x83\xaa\x3e\x0b\x38\x14\x01\x47\x2b\x74\x5b\xd0\x00\x9f\x11\x12\x16\x3b\x88\x83\xe2\xbb\x39\xc2\x24\x1c\x48\x60\x3e\x96\xf8\x06\xa8\xc4\x12\x4e\xca\x39\xf8\xe7\xf4\x0d\x58\x14\xb8\xb1\x41\x74\x90\x37\x7f\xa4\xee\xe6\xf2\xfd\xd5\xcf\xcd\xf5\xa7\xf7\x57\xbf\xc2\xc6\xac\xb0\xc8\xf1\xfe\x2c\xca\xff\xcc\xee\xe3\xd3\x33\xdb\xf4\xc8\x77\xa3\x1a\x61\x20\xc7\x12\xe0\x97\xb0\xc1\x34\x76\x6c\x6d\x5c\x1e\xda\xb8\x87\x21\x1f\x53\x58\xe3\x9e\xd3\x19\x45\xb6\xdb\xa9\x37\x3b\xe7\x8c\x56\xd8\x5d\xd9\x44\x4a\x76\x98\xc3\x40\x53\x3e\xa5\x77\x40\xcb\xf1\xf1\x48\xcf\xef\x69\x3e\xac\xd4\xf0\x59\xf8\xf6\x4d\x1a\x50\xe4\x2b\x37\x68\xff\x2e\x52\x1b\x9b\xce\x88\x0e\x09\xf5\xd9\x74\xdb\x49\x49\x1c\x94\xba\x6d\xe9\xcd\x6d\x93\x05\x53\xb3\x31\x6a\x7b\x94\x27\x5f\x0d\xe3\xe7\x0d\xe5\xff\x4a\xb9\xba\x81\xc0\x2f\x15\x34\x92\x3d\xa3\x6a\xed\xc7\x7a\xbd\x89\x8d\x0d\x99\xb5\x3e\xbd\x38\xad\xce\xcf\x67\xff\x06\x00\x00\xff\xff\xf1\xd3\xac\x67\xde\x07\x00\x00")

func assetsTuned05CmTunedProfilesYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned05CmTunedProfilesYaml,
		"assets/tuned/05-cm-tuned-profiles.yaml",
	)
}

func assetsTuned05CmTunedProfilesYaml() (*asset, error) {
	bytes, err := assetsTuned05CmTunedProfilesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/05-cm-tuned-profiles.yaml", size: 2014, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned06CmTunedRecommendYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd0\x31\x4b\x3c\x31\x10\x05\xf0\x3e\x9f\x62\xe0\xdf\xfd\xb9\xdd\xc5\x36\x70\x95\xb6\x7a\x8d\xd8\x88\xc5\x5c\x76\x76\x77\xb8\xec\x4c\xc8\x64\x0f\x0b\x3f\xbc\x6c\x6e\x45\x51\x2c\x84\xab\x02\x8f\xe4\xf7\x1e\xc1\xc4\x4f\x94\x8d\x55\x3c\x9c\x6f\xdc\x89\xa5\xf7\x70\xab\x32\xf0\x78\x8f\xc9\xcd\x54\xb0\xc7\x82\xde\x01\x08\xce\xe4\xa1\x2c\x42\x7d\x93\x29\xe8\x3c\x93\xf4\x5b\x6e\x09\x03\x79\xd0\x44\x62\x13\x0f\xa5\x09\x71\xb1\x42\xb9\x11\xed\xa9\x29\x8b\xb0\x8c\xee\x03\xba\x10\x1a\xd2\x27\xe3\xe1\xcd\x01\x00\x3c\x7f\x11\x54\x4a\xd6\xd8\xa4\x88\x42\xbb\x19\x57\xee\xa5\x5e\xea\xce\x98\xbb\xc8\xc7\xae\x42\xdd\x0a\xd5\x9a\x88\x47\x8a\xd6\x86\x61\xdc\xb7\xff\x6b\x92\x35\x52\x7b\x5a\x8e\x94\x85\x0a\x59\xcb\xda\x5d\xa0\xbd\xab\xd2\x3f\x78\x50\xb0\x25\x4c\x50\xdf\x02\xbd\xb2\x15\xdb\xc1\xe3\xe1\xee\xf0\x7d\x4f\x05\xc9\x76\xdb\x79\x85\x29\x14\xd1\x0a\x07\x23\xcc\x61\xda\x16\xfd\xfa\x01\x2b\x72\x85\x4e\x96\x21\xe3\xcf\xae\x3f\xea\xee\x3d\x00\x00\xff\xff\xe1\xbc\x00\xab\x37\x02\x00\x00")

func assetsTuned06CmTunedRecommendYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned06CmTunedRecommendYaml,
		"assets/tuned/06-cm-tuned-recommend.yaml",
	)
}

func assetsTuned06CmTunedRecommendYaml() (*asset, error) {
	bytes, err := assetsTuned06CmTunedRecommendYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/06-cm-tuned-recommend.yaml", size: 567, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"manifests/01-namespace.yaml":               manifests01NamespaceYaml,
	"manifests/02-crd.yaml":                     manifests02CrdYaml,
	"manifests/03-cr.yaml":                      manifests03CrYaml,
	"manifests/04-rbac.yaml":                    manifests04RbacYaml,
	"manifests/05-operator.yaml":                manifests05OperatorYaml,
	"manifests/image-references":                manifestsImageReferences,
	"assets/tuned/01-namespace.yaml":            assetsTuned01NamespaceYaml,
	"assets/tuned/02-service-account.yaml":      assetsTuned02ServiceAccountYaml,
	"assets/tuned/03-cluster-role.yaml":         assetsTuned03ClusterRoleYaml,
	"assets/tuned/04-cluster-role-binding.yaml": assetsTuned04ClusterRoleBindingYaml,
	"assets/tuned/05-cm-tuned-profiles.yaml":    assetsTuned05CmTunedProfilesYaml,
	"assets/tuned/06-cm-tuned-recommend.yaml":   assetsTuned06CmTunedRecommendYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"tuned": {nil, map[string]*bintree{
			"01-namespace.yaml":            {assetsTuned01NamespaceYaml, map[string]*bintree{}},
			"02-service-account.yaml":      {assetsTuned02ServiceAccountYaml, map[string]*bintree{}},
			"03-cluster-role.yaml":         {assetsTuned03ClusterRoleYaml, map[string]*bintree{}},
			"04-cluster-role-binding.yaml": {assetsTuned04ClusterRoleBindingYaml, map[string]*bintree{}},
			"05-cm-tuned-profiles.yaml":    {assetsTuned05CmTunedProfilesYaml, map[string]*bintree{}},
			"06-cm-tuned-recommend.yaml":   {assetsTuned06CmTunedRecommendYaml, map[string]*bintree{}},
		}},
	}},
	"manifests": {nil, map[string]*bintree{
		"01-namespace.yaml": {manifests01NamespaceYaml, map[string]*bintree{}},
		"02-crd.yaml":       {manifests02CrdYaml, map[string]*bintree{}},
		"03-cr.yaml":        {manifests03CrYaml, map[string]*bintree{}},
		"04-rbac.yaml":      {manifests04RbacYaml, map[string]*bintree{}},
		"05-operator.yaml":  {manifests05OperatorYaml, map[string]*bintree{}},
		"image-references":  {manifestsImageReferences, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
