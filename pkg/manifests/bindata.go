// Code generated by go-bindata.
// sources:
// assets/tuned/01-service-account.yaml
// assets/tuned/02-cluster-role.yaml
// assets/tuned/03-cluster-role-binding.yaml
// assets/tuned/04-cm-tuned-profiles.yaml
// assets/tuned/05-cm-tuned-recommend.yaml
// assets/tuned/06-ds-tuned.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTuned01ServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc7\x31\x0e\x42\x31\x08\x06\xe0\xbd\xa7\xe0\x02\x1d\x5c\xd9\x3c\x83\x89\x3b\xa1\xbf\x4a\xf4\x41\x43\xe9\x3b\xbf\xcb\x1b\x3f\x99\xf6\x44\x2e\x0b\x67\x3a\x6f\xed\x6b\x3e\x98\x1e\xc8\xd3\x14\x77\xd5\xd8\x5e\xed\x40\xc9\x90\x12\x6e\x44\x2e\x07\x98\x6a\x3b\xc6\xa5\x35\x45\xc1\x14\x13\xbe\x3e\xf6\xaa\xae\xbf\xbd\x0a\xd9\x3d\x06\x7a\x6d\x37\x7f\xf7\x98\x48\xa9\xc8\xf6\x0f\x00\x00\xff\xff\x95\x01\xe5\x42\x70\x00\x00\x00")

func assetsTuned01ServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned01ServiceAccountYaml,
		"assets/tuned/01-service-account.yaml",
	)
}

func assetsTuned01ServiceAccountYaml() (*asset, error) {
	bytes, err := assetsTuned01ServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/01-service-account.yaml", size: 112, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned02ClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x3f\x4f\xfc\x30\x0c\x40\xf7\x7c\x8a\x28\xf3\xaf\xfd\x89\x0d\x65\x65\x60\x63\x60\x60\x41\x1d\x7c\xa9\x69\xad\x4b\xed\xc8\x76\xca\x9f\x4f\x8f\xae\x27\x06\x8e\xc9\xd2\xb3\xdf\x33\x34\x7a\x41\x35\x12\xce\x51\x4f\x50\x46\xe8\xbe\x8a\xd2\x17\x38\x09\x8f\xe7\x7b\x1b\x49\xfe\xef\x77\xe1\x4c\x3c\xe7\xf8\x50\xbb\x39\xea\xb3\x54\x0c\x1b\x3a\xcc\xe0\x90\x43\x8c\x0c\x1b\xe6\x58\xae\xdb\x81\x65\xc6\xc1\x3b\x13\x2f\xd9\x3b\xe3\x1c\xb4\x57\xb4\x1c\x86\x08\x8d\x1e\x55\x7a\xb3\x1c\x5f\x53\x9a\x42\x8c\x8a\x26\x5d\x0b\x1e\xe4\x62\xda\x81\x77\xd4\xd3\x81\x16\xf4\xf4\x2f\x55\xb2\xcb\x78\x07\x2f\x6b\x9a\x6e\x43\x86\xa5\x2b\xf9\xe7\x28\x0d\xd9\x56\x7a\xf3\x91\xe4\x6f\xfd\xe7\xac\x08\x3b\x7e\x78\x11\x36\x57\x20\xf6\x9b\x97\xdd\xf0\x97\xfc\x04\xdb\x35\xd0\x94\x76\xaa\xb8\xe0\x9c\xa6\xf0\x1d\x00\x00\xff\xff\x0d\x41\x2b\x61\x3b\x01\x00\x00")

func assetsTuned02ClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned02ClusterRoleYaml,
		"assets/tuned/02-cluster-role.yaml",
	)
}

func assetsTuned02ClusterRoleYaml() (*asset, error) {
	bytes, err := assetsTuned02ClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/02-cluster-role.yaml", size: 315, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned03ClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xb1\x4e\x03\x31\x0c\x86\xf7\x3c\x45\x5e\x20\x87\xd8\x90\x37\x60\x67\x28\x12\xbb\x9b\xb8\xad\xe9\x9d\x7d\xb2\x9d\x4a\xf0\xf4\xe8\x94\x8a\x05\x86\x1b\x2d\xfd\xdf\xf7\x19\x57\xfe\x20\x73\x56\x81\x6c\x47\xac\x13\xf6\xb8\xa8\xf1\x37\x06\xab\x4c\xd7\x27\x9f\x58\x1f\x6e\x8f\xe9\xca\xd2\x20\xbf\xce\xdd\x83\xec\xa0\x33\xbd\xb0\x34\x96\x73\x5a\x28\xb0\x61\x20\xa4\x9c\x05\x17\x82\x5c\xc7\xa8\x88\x36\x2a\xd1\x85\xe5\x0c\xd1\x85\x5a\x32\x9d\xe9\x40\xa7\x6d\xfa\xc7\xb7\x03\xf7\x7e\xfc\xa4\x1a\x0e\xa9\xdc\xf9\x77\xb2\x1b\x57\x7a\xae\x55\xbb\xc4\xaf\x62\xcc\xc7\xe5\x2b\x56\x82\xac\x2b\x89\x5f\xf8\x14\xe5\x1f\x7f\xd1\x95\x0c\x43\x2d\x75\x27\x7b\xdb\xa8\xad\xe1\x5f\x1e\xb4\x80\x8f\x08\x8e\x08\xec\x33\xdd\x5f\xfe\x09\x00\x00\xff\xff\x51\x4a\xd8\x71\x60\x01\x00\x00")

func assetsTuned03ClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned03ClusterRoleBindingYaml,
		"assets/tuned/03-cluster-role-binding.yaml",
	)
}

func assetsTuned03ClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsTuned03ClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/03-cluster-role-binding.yaml", size: 352, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned04CmTunedProfilesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xa1\x0e\xc2\x40\x0c\x06\x60\x7f\x4f\xd1\xcc\x57\x60\xcf\xa2\xb1\xf8\x66\xf7\x6f\x34\x6c\x6d\x73\xd7\xe3\xf9\x49\x08\x08\xec\x27\x3e\x09\xbd\xa3\x0f\x75\xab\xf4\xba\x94\xa7\x5a\xab\x74\x75\xdb\x74\xbf\x49\x94\x13\x29\x4d\x52\x6a\x21\x32\x39\x51\x29\xa7\xa1\x71\x74\xdf\xf4\xc0\xf8\xf2\x08\x59\x51\xc9\x03\x36\x1e\xba\x25\xaf\xc7\x1c\x89\xce\xe6\x0d\x9c\xd3\xd4\x76\xf6\x40\x97\xf4\x5e\x7e\xe1\x7f\xc5\x1f\xa6\x65\x29\xef\x00\x00\x00\xff\xff\x0a\xb4\xaa\xf4\x94\x00\x00\x00")

func assetsTuned04CmTunedProfilesYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned04CmTunedProfilesYaml,
		"assets/tuned/04-cm-tuned-profiles.yaml",
	)
}

func assetsTuned04CmTunedProfilesYaml() (*asset, error) {
	bytes, err := assetsTuned04CmTunedProfilesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/04-cm-tuned-profiles.yaml", size: 148, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned05CmTunedRecommendYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xa1\xb2\x02\x31\x0c\x05\x50\xdf\xaf\xc8\xac\xaf\x78\x36\xf6\x69\x2c\x3e\xd3\xde\x5d\x32\xd0\x24\xd3\x66\xf9\x7e\x04\x30\xd8\x23\x8e\x84\x5e\x31\x97\xba\x31\x3d\xff\xca\x5d\xad\x33\xfd\xbb\xed\x7a\x5c\x24\xca\x40\x4a\x97\x14\x2e\x44\x26\x03\x4c\x79\x1a\x7a\x9d\x68\x3e\x06\xac\x7f\x7c\x85\x34\x30\x79\xc0\xd6\x4d\xf7\xac\xed\x71\xae\xc4\xac\xe6\x1d\x35\x4f\x53\x3b\xaa\x07\xa6\xa4\xcf\xf2\x1d\xdf\x97\xb7\xf8\x7d\x4c\xdb\x56\x5e\x01\x00\x00\xff\xff\x1b\xe2\xd5\x67\x95\x00\x00\x00")

func assetsTuned05CmTunedRecommendYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned05CmTunedRecommendYaml,
		"assets/tuned/05-cm-tuned-recommend.yaml",
	)
}

func assetsTuned05CmTunedRecommendYaml() (*asset, error) {
	bytes, err := assetsTuned05CmTunedRecommendYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/05-cm-tuned-recommend.yaml", size: 149, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned06DsTunedYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4d\x6f\x23\x37\x0c\xbd\xfb\x57\x10\xdb\x5e\x95\x49\x51\xb4\x87\xb9\x05\x8e\xb3\x58\x60\xed\x18\x71\xb6\x40\x4f\x01\x2d\xd1\xb6\x10\x8d\x34\x90\xa8\xd9\x35\x16\xfd\xef\x85\x3c\x1f\x9e\xf1\x78\x9c\xa2\x73\x49\x22\x3e\x3e\x91\x7c\x24\x15\x2c\xf5\x5f\xe4\x83\x76\x36\x07\x2c\xcb\x90\x55\xbf\xcd\xde\xb5\x55\x39\x3c\x22\x15\xce\x6e\x88\x67\x05\x31\x2a\x64\xcc\x67\x00\x16\x0b\xca\x81\xa3\x25\xd5\xfc\x15\x4a\x94\x94\x83\x2b\xc9\x86\x83\xde\xb1\x90\x26\x06\x26\x2f\xac\x53\x24\x38\x5a\x6d\xf7\xc2\x95\xe4\x91\x9d\x9f\x01\x18\xdc\x92\x09\x89\x0b\x7a\x4e\x58\x96\x2d\x6d\x28\x49\x26\x73\x20\x43\x92\x9d\xaf\xa1\x05\xb2\x3c\x7c\xed\xf9\x4e\x78\x03\x30\x15\xa5\x41\xa6\xc6\xaf\x17\x7c\xfa\xcc\x80\x62\x92\x04\xa0\x0d\xe3\xf4\x3b\xf9\x4a\x4b\x7a\x90\xd2\x45\xcb\xab\x41\x0d\xd2\x87\x91\x5d\x91\x4c\x9b\x01\xf0\xd5\xbd\x93\xcd\x81\x7d\xa4\x06\x28\x9d\x65\xd4\x96\x7c\x17\x81\x00\xe9\x8a\x02\xad\x3a\x87\x24\x20\xab\xd0\x67\x46\x6f\xb3\xd3\x25\xd9\x56\xdb\xcc\x47\xdb\x01\x74\x81\x7b\xca\xe1\xd7\x9f\xf3\xaf\xdf\x36\xaf\x8b\x97\xb7\xd5\xf3\xe3\xe2\xed\xf5\xdb\x6a\xf1\xf8\xf6\x65\xf9\xf0\x79\xf1\xcf\x10\xba\x8e\xc6\xac\x9d\xd1\xf2\x98\xc3\x83\xf9\x8e\xc7\xd0\xd9\xed\x28\x17\x00\x4f\xc1\x45\x2f\x29\xe4\xf0\xf3\xcc\x14\x48\x46\xaf\xf9\x38\x77\x96\xe9\x07\x9f\xc3\x05\x28\xbd\xae\xb4\xa1\x3d\xa9\x41\xb2\x49\x0a\x5f\x68\x8b\xac\x9d\x5d\x52\x08\x29\x14\xe4\x43\x0e\x99\xa2\x2a\xeb\x19\x85\x71\xfb\x5b\x4e\x4d\xec\x4f\xda\x9c\xb9\x2b\x67\x62\x41\xcb\x54\xe7\xd0\xaf\xdd\x49\x87\xe6\x1a\x62\xd9\x94\xd0\x53\x2a\x33\x59\x75\xa7\x7a\x81\xd7\xd9\x13\x4b\x71\x42\x89\x0e\x35\xc1\x37\x94\xa5\xf4\x6e\xa7\x0d\x05\x91\xfa\x6b\xc4\x5a\xa1\x17\x46\x6f\x1b\xe6\xeb\xd8\x21\x7b\xe8\xe9\xd2\xb2\xf4\xcf\xc6\xb1\xf8\x68\x33\xb5\x8d\x63\xb7\x74\xb9\x8f\x56\x5c\x18\x3d\xa1\x7a\xb6\xe6\x78\x21\xd3\x90\x38\x91\x86\x63\x60\x2a\x54\xf3\x73\x44\x9f\xa8\x1b\x88\x18\x41\x26\x2e\x21\x5b\xf5\x7b\x46\x34\x54\xcf\xf3\x75\xdd\xbe\xab\x87\xe5\xa2\x67\x07\xa8\xd0\x44\x7a\xf2\xae\xc8\x07\xc7\x00\x3b\x4d\x46\xbd\xd0\xee\xf2\xbc\xb1\xd4\x69\xa4\xf1\xbd\x4b\x2b\x28\x4d\xeb\x95\x7b\x5f\x16\x9b\xbf\x57\xf3\xb7\xf5\xe2\xe5\xcb\xf3\xe3\xf8\xde\x1c\x3e\xfd\x79\xff\xa9\x39\xaf\x5b\xad\x37\xb2\x07\x17\xea\x6a\xf5\x87\x60\x2c\xe2\xa5\x84\x37\x1d\xaf\xea\x39\xa9\xe6\x4d\xaa\x1b\x0a\x7e\xa0\x5f\xda\x46\x76\xa7\xf7\x4b\x2c\xfb\xbc\x9a\xa9\x08\x43\xf5\xde\xe9\xd8\xec\x0d\xe1\x64\x79\x65\x72\xce\xf1\xfc\x71\x2f\xba\x2d\x7b\x97\xf8\x47\xfd\x34\x35\x7d\x69\x3d\xa7\x3d\x80\xe6\xa2\x99\x3e\x1a\xdc\xff\x95\xc7\xd4\x3c\xb7\x79\x0c\x51\x77\x47\x2c\xcc\x44\x26\x2d\xe6\xbf\x26\xf2\xf1\xae\x50\x36\xb4\x5b\x70\x5e\xbf\xaf\x4f\xda\x07\x6e\xac\xa9\x17\x56\xc4\xdf\x9d\x7f\x1f\xf0\x7b\x0a\x8c\x9e\xaf\xee\xfe\x20\x0f\xa4\xa2\x21\x5f\x3f\x67\x8a\x76\x18\x0d\x8b\xee\xb8\x7b\xfa\x86\x6b\xff\xfc\x24\xf4\xf6\xf4\x67\x8f\x92\xd6\xe4\xb5\x53\x1b\x92\xce\xaa\x90\xc3\xef\xf7\x2d\xce\x99\xf4\xf8\x6b\x67\xbb\xd2\xff\xd2\x1e\x12\xa0\x31\x90\x9e\x44\x0e\x10\x1c\xf0\x01\xb9\xae\x21\xe8\x00\x78\x8a\x17\x4a\x4f\x81\x2c\x83\xb3\x27\x74\x1a\xea\xf3\x18\xb4\xff\x59\xe4\xb0\xf8\xa1\x03\x87\xd9\xbf\x01\x00\x00\xff\xff\x48\x4a\x91\x02\xd2\x08\x00\x00")

func assetsTuned06DsTunedYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned06DsTunedYaml,
		"assets/tuned/06-ds-tuned.yaml",
	)
}

func assetsTuned06DsTunedYaml() (*asset, error) {
	bytes, err := assetsTuned06DsTunedYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/06-ds-tuned.yaml", size: 2258, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tuned/01-service-account.yaml":      assetsTuned01ServiceAccountYaml,
	"assets/tuned/02-cluster-role.yaml":         assetsTuned02ClusterRoleYaml,
	"assets/tuned/03-cluster-role-binding.yaml": assetsTuned03ClusterRoleBindingYaml,
	"assets/tuned/04-cm-tuned-profiles.yaml":    assetsTuned04CmTunedProfilesYaml,
	"assets/tuned/05-cm-tuned-recommend.yaml":   assetsTuned05CmTunedRecommendYaml,
	"assets/tuned/06-ds-tuned.yaml":             assetsTuned06DsTunedYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"tuned": {nil, map[string]*bintree{
			"01-service-account.yaml":      {assetsTuned01ServiceAccountYaml, map[string]*bintree{}},
			"02-cluster-role.yaml":         {assetsTuned02ClusterRoleYaml, map[string]*bintree{}},
			"03-cluster-role-binding.yaml": {assetsTuned03ClusterRoleBindingYaml, map[string]*bintree{}},
			"04-cm-tuned-profiles.yaml":    {assetsTuned04CmTunedProfilesYaml, map[string]*bintree{}},
			"05-cm-tuned-recommend.yaml":   {assetsTuned05CmTunedRecommendYaml, map[string]*bintree{}},
			"06-ds-tuned.yaml":             {assetsTuned06DsTunedYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
