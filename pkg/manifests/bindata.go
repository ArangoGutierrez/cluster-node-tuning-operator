// Code generated by go-bindata.
// sources:
// assets/tuned/01-service-account.yaml
// assets/tuned/02-cluster-role.yaml
// assets/tuned/03-cluster-role-binding.yaml
// assets/tuned/04-cm-tuned-profiles.yaml
// assets/tuned/05-cm-tuned-recommend.yaml
// assets/tuned/06-ds-tuned.yaml
// assets/tuned/07-cr-tuned.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTuned01ServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc7\x31\x0e\x42\x31\x08\x06\xe0\xbd\xa7\xe0\x02\x1d\x5c\xd9\x3c\x83\x89\x3b\xa1\xbf\x4a\xf4\x41\x43\xe9\x3b\xbf\xcb\x1b\x3f\x99\xf6\x44\x2e\x0b\x67\x3a\x6f\xed\x6b\x3e\x98\x1e\xc8\xd3\x14\x77\xd5\xd8\x5e\xed\x40\xc9\x90\x12\x6e\x44\x2e\x07\x98\x6a\x3b\xc6\xa5\x35\x45\xc1\x14\x13\xbe\x3e\xf6\xaa\xae\xbf\xbd\x0a\xd9\x3d\x06\x7a\x6d\x37\x7f\xf7\x98\x48\xa9\xc8\xf6\x0f\x00\x00\xff\xff\x95\x01\xe5\x42\x70\x00\x00\x00")

func assetsTuned01ServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned01ServiceAccountYaml,
		"assets/tuned/01-service-account.yaml",
	)
}

func assetsTuned01ServiceAccountYaml() (*asset, error) {
	bytes, err := assetsTuned01ServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/01-service-account.yaml", size: 112, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned02ClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x3f\x4f\xc4\x30\x0c\xc5\xf7\x7c\x8a\x28\xf3\x5d\x11\x1b\xca\xca\xc0\xc6\xc0\xc0\x82\x3a\xf8\x12\xd3\x5a\xd7\xda\x91\xed\x94\x3f\x9f\x1e\x5d\x4f\x0c\x1c\x93\x25\xff\xde\x7b\x3f\x68\xf4\x8a\x6a\x24\x9c\xa3\x9e\xa0\x0c\xd0\x7d\x16\xa5\x6f\x70\x12\x1e\xce\x0f\x36\x90\xdc\x6d\xf7\xe1\x4c\x5c\x73\x7c\x5c\xba\x39\xea\x8b\x2c\x18\x56\x74\xa8\xe0\x90\x43\x8c\x0c\x2b\xe6\x58\xae\xf4\xc8\x52\xf1\xe8\x9d\x89\xa7\xec\x9d\xb1\x06\xed\x0b\x5a\x0e\xc7\x08\x8d\x9e\x54\x7a\xb3\x1c\xdf\x52\x1a\x43\x8c\x8a\x26\x5d\x0b\xee\x9f\x4b\xd3\xd2\x21\x35\xa9\xb6\xd3\x0d\xf5\xb4\x93\x09\x3d\x1d\xd2\x42\x76\x39\x1f\xe0\x65\x4e\xe3\xed\x9e\x61\xe9\x4a\xfe\x35\x48\x43\xb6\x99\xde\x7d\x20\xf9\x2f\xf9\x8d\x15\x61\xc7\x4f\x2f\xc2\xe6\x0a\xc4\x7e\xa3\xec\x86\x7f\xca\xcf\xb0\x5e\x07\x9a\xd2\x46\x0b\x4e\x58\xd3\x18\x7e\x02\x00\x00\xff\xff\x24\x0d\xec\x93\x42\x01\x00\x00")

func assetsTuned02ClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned02ClusterRoleYaml,
		"assets/tuned/02-cluster-role.yaml",
	)
}

func assetsTuned02ClusterRoleYaml() (*asset, error) {
	bytes, err := assetsTuned02ClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/02-cluster-role.yaml", size: 322, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned03ClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xb1\x4e\x03\x31\x0c\x86\xf7\x3c\x45\x5e\x20\x87\xd8\x90\x37\x60\x67\x28\x12\xbb\x9b\xb8\xad\xe9\x9d\x7d\xb2\x9d\x4a\xf0\xf4\xe8\x94\x8a\x05\x86\x1b\x2d\xfd\xdf\xf7\x19\x57\xfe\x20\x73\x56\x81\x6c\x47\xac\x13\xf6\xb8\xa8\xf1\x37\x06\xab\x4c\xd7\x27\x9f\x58\x1f\x6e\x8f\xe9\xca\xd2\x20\xbf\xce\xdd\x83\xec\xa0\x33\xbd\xb0\x34\x96\x73\x5a\x28\xb0\x61\x20\xa4\x9c\x05\x17\x82\x5c\xc7\xa8\x88\x36\x2a\xd1\x85\xe5\x0c\xd1\x85\x5a\x32\x9d\xe9\x40\xa7\x6d\xfa\xc7\xb7\x03\xf7\x7e\xfc\xa4\x1a\x0e\xa9\xdc\xf9\x77\xb2\x1b\x57\x7a\xae\x55\xbb\xc4\xaf\x62\xcc\xc7\xe5\x2b\x56\x82\xac\x2b\x89\x5f\xf8\x14\xe5\x1f\x7f\xd1\x95\x0c\x43\x2d\x75\x27\x7b\xdb\xa8\xad\xe1\x5f\x1e\xb4\x80\x8f\x08\x8e\x08\xec\x33\xdd\x5f\xfe\x09\x00\x00\xff\xff\x51\x4a\xd8\x71\x60\x01\x00\x00")

func assetsTuned03ClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned03ClusterRoleBindingYaml,
		"assets/tuned/03-cluster-role-binding.yaml",
	)
}

func assetsTuned03ClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsTuned03ClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/03-cluster-role-binding.yaml", size: 352, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned04CmTunedProfilesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xa1\x0e\xc2\x40\x0c\x06\x60\x7f\x4f\xd1\xcc\x57\x60\xcf\xa2\xb1\xf8\x66\xf7\x6f\x34\x6c\x6d\x73\xd7\xe3\xf9\x49\x08\x08\xec\x27\x3e\x09\xbd\xa3\x0f\x75\xab\xf4\xba\x94\xa7\x5a\xab\x74\x75\xdb\x74\xbf\x49\x94\x13\x29\x4d\x52\x6a\x21\x32\x39\x51\x29\xa7\xa1\x71\x74\xdf\xf4\xc0\xf8\xf2\x08\x59\x51\xc9\x03\x36\x1e\xba\x25\xaf\xc7\x1c\x89\xce\xe6\x0d\x9c\xd3\xd4\x76\xf6\x40\x97\xf4\x5e\x7e\xe1\x7f\xc5\x1f\xa6\x65\x29\xef\x00\x00\x00\xff\xff\x0a\xb4\xaa\xf4\x94\x00\x00\x00")

func assetsTuned04CmTunedProfilesYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned04CmTunedProfilesYaml,
		"assets/tuned/04-cm-tuned-profiles.yaml",
	)
}

func assetsTuned04CmTunedProfilesYaml() (*asset, error) {
	bytes, err := assetsTuned04CmTunedProfilesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/04-cm-tuned-profiles.yaml", size: 148, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned05CmTunedRecommendYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xa1\xb2\x02\x31\x0c\x05\x50\xdf\xaf\xc8\xac\xaf\x78\x36\xf6\x69\x2c\x3e\xd3\xde\x5d\x32\xd0\x24\xd3\x66\xf9\x7e\x04\x30\xd8\x23\x8e\x84\x5e\x31\x97\xba\x31\x3d\xff\xca\x5d\xad\x33\xfd\xbb\xed\x7a\x5c\x24\xca\x40\x4a\x97\x14\x2e\x44\x26\x03\x4c\x79\x1a\x7a\x9d\x68\x3e\x06\xac\x7f\x7c\x85\x34\x30\x79\xc0\xd6\x4d\xf7\xac\xed\x71\xae\xc4\xac\xe6\x1d\x35\x4f\x53\x3b\xaa\x07\xa6\xa4\xcf\xf2\x1d\xdf\x97\xb7\xf8\x7d\x4c\xdb\x56\x5e\x01\x00\x00\xff\xff\x1b\xe2\xd5\x67\x95\x00\x00\x00")

func assetsTuned05CmTunedRecommendYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned05CmTunedRecommendYaml,
		"assets/tuned/05-cm-tuned-recommend.yaml",
	)
}

func assetsTuned05CmTunedRecommendYaml() (*asset, error) {
	bytes, err := assetsTuned05CmTunedRecommendYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/05-cm-tuned-recommend.yaml", size: 149, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned06DsTunedYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4d\x8f\x22\x37\x10\xbd\xf3\x2b\x4a\x9b\x5c\x9b\x66\x13\x25\x87\xbe\x8d\x80\x59\x8d\xb4\x30\x68\x98\x8d\x94\xd3\xc8\xd8\x05\x58\xf8\xa3\x63\x97\xd9\x41\xab\xfc\xf7\xc8\xf4\x07\x6d\x9a\x66\x56\xe9\xcb\x0c\x55\xcf\xcf\xcf\xae\xe7\xb2\x59\x29\xff\x42\xe7\xa5\x35\x05\xb0\xb2\xf4\xf9\xf1\xf3\xe8\x20\x8d\x28\x60\xc6\x50\x5b\xb3\x46\x1a\x69\x24\x26\x18\xb1\x62\x04\x60\x98\xc6\x02\x28\x18\x14\xf5\x2f\x5f\x32\x8e\x05\xd8\x12\x8d\xdf\xcb\x2d\x65\x5c\x05\x4f\xe8\x32\x63\x05\x66\x14\x8c\x34\xbb\xcc\x96\xe8\x18\x59\x37\x02\x50\x6c\x83\xca\x47\x2e\xe8\x0c\x62\x65\xd9\xd0\xfa\x12\x79\x4c\x7b\x54\xc8\xc9\xba\x0a\xaa\x19\xf1\xfd\xd7\xce\xd8\x81\xd1\x00\x84\xba\x54\x8c\xb0\x1e\xd7\x11\x1f\x3f\x95\x50\x0c\x92\x00\x34\x32\xce\xff\xa3\x3b\x4a\x8e\x0f\x9c\xdb\x60\x68\x99\xec\x41\xfc\x58\x20\xab\x63\x6a\x9d\x00\x5f\xed\x01\x4d\x01\xe4\x02\xd6\x40\x6e\x0d\x31\x69\xd0\xb5\x0a\x32\xe0\x56\x6b\x66\xc4\x45\x52\x06\xf9\x91\xb9\x5c\xc9\x4d\x7e\x9e\x24\xdf\x48\x93\xbb\x60\x5a\x80\x43\x6f\x83\xe3\xd8\x59\x46\x0c\xfe\x13\xd0\x53\x12\x03\xe0\x65\x28\xe0\xf3\x44\x27\x41\x8d\xda\xba\x53\x01\xbf\x4d\x16\xb2\x4d\x48\xcd\x76\x58\xc0\xaf\x3f\xa6\x5f\xbf\xad\x5f\xe7\x2f\x6f\xcb\xe7\xd9\xfc\xed\xf5\xdb\x72\x3e\x7b\x7b\x5a\x3c\x7c\x99\xff\x9b\x42\x57\x41\xa9\x95\x55\x92\x9f\x0a\x78\x50\xdf\xd9\xc9\xb7\x79\xd3\xdb\xa0\xae\x66\xf8\x71\x61\xf2\xc8\x83\x93\x74\x9a\x5a\x43\xf8\x4e\x5d\xed\xa5\x93\x47\xa9\x70\x87\x22\xd9\xc1\x58\x5f\xa7\xa5\x61\x24\xad\x59\xa0\xf7\x51\x0a\xa3\x7d\x01\xb9\xc0\x63\xde\x49\x66\xca\xee\xee\x0d\xaa\xb5\x3f\x4a\x75\xe1\x3e\x5a\x15\x34\x2e\x62\xf1\x7c\xb7\x20\xe7\xe2\xd6\xd3\x20\xf1\xba\x2e\x0e\x63\xed\xd0\x88\xb1\xe8\x08\xaf\x56\x8f\xc4\xb3\x33\x2a\x6b\x51\x03\x7c\x69\xad\x4b\x67\xb7\x52\xa1\xcf\xa2\x69\x7b\xac\x47\xe6\x32\x25\x37\x35\xf3\x6d\x6c\xca\xee\x3b\x75\x69\x58\xba\xb1\xbe\x16\x17\x4c\x2e\x36\xa1\x3f\x2c\x4e\xee\x82\xc9\xae\x92\x0e\x99\x78\x36\xea\x74\x55\xa6\x94\x38\x92\xfa\x93\x27\xd4\xa2\xfe\xdb\xa3\x8f\xd4\x35\x24\xeb\x41\x7e\x6a\x92\xb8\x8b\xda\x8a\xa0\xb0\x2f\x3e\xee\x5a\x3f\x37\x40\x8b\xe6\xd8\xb5\x62\x56\x73\x3c\x4f\x57\xd5\xa9\x58\x3e\x2c\xe6\xc9\x89\x3a\x32\x15\xf0\xd1\x59\x9d\x9e\x3e\x80\xad\x44\x25\x5e\x70\x7b\x1d\xaf\x33\x95\xf0\xd8\x6a\xc6\xb1\x5d\xc6\xce\x72\x63\xde\x97\xf9\xfa\xef\xe5\xf4\x6d\x35\x7f\x79\x7a\x9e\xf5\xe7\x2d\xe0\xd3\x9f\x93\x4f\x75\xbc\x72\x70\xa7\xbd\xec\xad\xaf\xf6\xa7\x7b\xb6\xfa\xde\xb8\x76\xc6\xdd\x81\x37\x6d\x32\x68\x92\xbb\x54\x77\x8c\xf1\x81\x2d\xee\xd2\xde\xb2\xc2\x90\x11\x62\x0b\x36\x5b\xb9\x5b\xb0\xb2\xcb\x24\x09\xb5\x4f\x6d\x70\xc0\x53\xdd\xd7\x32\xcb\xcb\x1b\x27\xfb\xa2\xe0\x8f\x49\xd6\x5e\x2d\xe3\xc8\xdf\x73\xe4\x50\x77\x88\x77\x52\xec\x53\x4c\x5d\xb9\xf2\xa3\xc6\xf2\xbf\xd6\x31\xd4\x6f\x9a\x75\xa4\xa8\xf1\x89\x69\x35\xb0\x92\x06\xf3\xb3\x0b\xf9\xb8\x97\x09\xe3\x9b\x2e\x3d\xad\x1e\x15\x8f\xd2\x79\xaa\xb3\xf1\xc0\xac\x93\x37\x42\xfc\x36\x48\x6c\x7c\x08\x1b\x74\x06\x09\xfd\x58\xda\xdc\xfa\x58\x75\x13\xde\x6b\x50\xb4\xcd\x12\xe9\xbb\x75\x87\x44\xd8\xd9\x4e\x4f\xb3\x24\xe6\xd0\x13\x73\x74\xf3\xa2\xf3\x7c\x8f\xd1\x47\xae\x7a\x10\x08\xdc\xb2\xa0\x28\x6b\xc3\xed\xe3\x21\xbd\xe3\x2e\xf7\x5f\xe7\x52\xfa\xe2\x18\xc7\x15\x3a\x69\xc5\x1a\xb9\x35\xc2\x17\xf0\xfb\xa4\xc1\x59\x15\x9f\x4f\xd2\x9a\xb6\x8e\xbf\x34\x41\x04\xa6\x14\xc4\x47\x05\x79\xf0\x16\x68\xcf\xa8\x2a\x08\x48\x0f\xec\xac\x17\x4a\x87\x1e\x0d\x81\x35\x67\x74\xdc\xb9\x8b\xf9\x9b\xb7\x59\x01\xf3\x77\xe9\xc9\x8f\xfe\x0b\x00\x00\xff\xff\xce\xf6\xc6\x0a\x14\x0a\x00\x00")

func assetsTuned06DsTunedYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned06DsTunedYaml,
		"assets/tuned/06-ds-tuned.yaml",
	)
}

func assetsTuned06DsTunedYaml() (*asset, error) {
	bytes, err := assetsTuned06DsTunedYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/06-ds-tuned.yaml", size: 2580, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned07CrTunedYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4f\x6f\xdb\xc6\x13\xbd\xeb\x53\x0c\x94\xdf\xc1\xc6\x2f\xa4\x4c\x59\xb2\x63\x01\xec\x25\x0d\x90\x43\x8b\x04\x4d\xda\x4b\x51\x10\xeb\xe5\x50\x5c\x68\xff\x61\x67\x56\xb6\xd2\xf6\xbb\x17\x4b\x91\xb4\xad\xd8\x8e\x82\xba\x3e\x51\xe4\xcc\x7b\xf3\xe6\xed\x8c\x57\x78\xf5\x1b\x06\x52\xce\xae\x80\xa3\xc5\x3a\x77\x1e\x2d\xb5\xaa\xe1\x5c\xb9\xd9\xb6\x10\xda\xb7\xa2\x98\x6c\x94\xad\x57\xf0\x39\x45\x4c\x0c\xb2\xa8\x05\x8b\xd5\x04\xc0\x0a\x83\x2b\xa8\xb1\x11\x51\x73\xff\x9b\xbc\x90\xb8\x82\x11\x28\x93\x3a\x12\x63\xc8\xac\xab\x31\xe3\x68\x95\x5d\x67\xce\x63\x10\xec\xc2\x84\x3c\xca\x84\xe4\x83\x6b\x94\xc6\xf4\x98\xf5\xb0\xd3\x11\x62\x3a\x01\x00\xe8\x48\xe1\xaf\xee\x19\xe0\x77\x23\x94\xfd\xa3\xff\x41\xd1\x18\x11\x76\xe5\x07\xcf\xca\xa8\x2f\x08\xb4\x23\x46\x43\x10\xa2\x4d\x7c\xf0\xc1\xa3\xfd\x94\xa0\xe0\xc4\x8b\x80\x96\x07\xc2\xd3\x1e\x41\x59\xa9\x63\x8d\xe5\xff\xfe\x6c\x56\x5b\x15\xb8\x92\x2d\xca\x4d\xf7\x18\x85\xce\xd6\x11\x89\x57\xdc\x06\x17\xd7\xad\x8f\x9c\x79\x0c\x8d\x0b\x46\x58\x89\x7f\x4f\x86\x92\x08\xb5\xb2\xf1\x76\xa8\x4a\x6c\x65\x25\x85\x6c\xb1\xe2\x36\x20\xb5\x4e\xd7\xe5\x9b\xe2\x6a\x3e\xc6\x5b\xe4\x21\xd6\x36\x95\x74\xd6\x72\x10\x72\x53\xb5\x82\x5a\x52\x5f\xb0\x2c\xce\x8b\xb3\xcb\xbb\x78\xda\x91\x64\x3d\xa6\x20\xe7\xca\x6f\x17\xb9\xf2\x55\xe3\xc2\x8d\x08\x75\x59\xf4\xdf\x36\x18\x2c\xea\xdc\xab\xba\x32\xe2\xb6\xfc\xa1\x07\xba\x4b\xb4\xc8\x8d\xd2\x8c\x21\x7f\xc0\x9c\x82\x8b\xb3\xc5\x9b\xe5\xe5\xc5\x21\x8b\x45\xb5\x6e\xf3\xde\xeb\x7c\x2d\x7b\x51\xc5\x5e\xd2\x71\xc1\xf3\xf2\x7c\x7e\x79\xf1\xe6\xc8\xe8\xf3\xf2\x62\xb9\x3c\x3f\x28\xe4\xe2\x7b\x0a\x79\x32\xf8\xd1\x42\x9e\x8c\x1e\x0a\xb9\xe7\x43\x43\x83\x0d\x33\xda\xd1\xcc\xb8\x3a\x6a\x9c\xd9\xad\xc1\x4a\xba\x80\x33\x2f\x82\x30\xc8\x18\x68\xa6\x5c\xc5\xca\xa0\x8b\x5c\x2e\xe6\x57\x8b\xab\x8b\xcb\xf9\xd5\xf2\xd8\x64\x23\x6e\xab\x80\x1c\x14\x52\x59\x9c\x4d\x1e\x1d\x8f\x4c\x3a\xcb\xc1\xe9\xcc\x6b\x61\xf1\x25\x87\xa5\x07\x86\x0e\xf8\x60\x52\x46\xfa\x27\x8e\xe7\x2b\xd8\xa4\x95\x02\xfb\xb7\x40\xc8\xac\xec\x9a\x5e\x83\x11\xb7\x89\x37\x31\xa9\x99\x83\xbb\xa1\x1a\x12\x47\x80\x9f\x95\x55\x46\x68\xf0\x01\xd1\x78\x56\xce\xc2\x3a\x08\x1b\xb5\x08\x8a\x77\xd0\xb8\x00\x6f\x3f\xfe\x9a\x5d\xbb\x68\x6b\x60\x41\x1b\x5a\x8d\xb9\x27\xbd\x8b\x2b\x28\xc0\x10\xca\x57\x00\x27\x05\xfc\x1f\x94\x76\xeb\x13\x2b\x7d\xa4\xd3\xd3\xd7\x10\xad\x62\x5a\x81\x15\xd6\x11\x4a\x67\x6b\x3a\x7d\x38\x41\x24\x5b\xac\x2b\xa3\x6c\x75\x8f\xb9\xb2\xc9\x8c\xfd\xdf\x48\xf8\xb9\x45\x60\xc7\x42\x43\x72\x1b\xb8\x45\xe8\x92\xa3\xc6\x00\x37\x4a\xeb\xd4\x4d\x52\x35\x06\x10\x60\xd4\x3a\x08\xc6\x3a\xad\x21\x89\x44\x23\xca\xb4\x5b\x18\xd0\x3a\x9e\x82\x48\xaa\xda\x48\xa0\x91\x08\xb4\xda\xa0\xde\x01\x3b\xb8\x46\x08\x98\x0d\x10\x77\x8a\xf7\x3e\x0e\xeb\x18\x14\xc1\xb2\x2b\xf1\x35\xa8\x1c\x73\x38\xcb\x97\x60\x9e\xd2\x97\xb0\x94\xb3\x95\x74\xc4\x49\xde\xf2\x40\xdd\xa7\xb7\xef\xdf\xfd\x58\x7d\xf8\xfc\xfe\xdd\x2f\x70\x23\x36\x98\x45\x7f\xdf\x8b\xfc\x2b\xef\x3e\x3e\xee\xd9\x4d\x8b\x76\x6f\x55\x07\x03\xd1\xe7\x00\x3f\xb9\x1b\x0c\x5d\xc7\xb6\x42\xc7\xd4\xc6\x11\x46\x19\x1f\xdc\x16\x47\x4e\x2d\x18\xad\xdc\xf5\xbd\x19\x4e\x4e\x77\x14\x86\x4f\x32\x28\x56\x32\xf9\x90\x68\xf2\xc7\xf4\x26\xb4\xe8\x0f\x2d\x5d\xf4\x9a\x1f\x1f\xb2\xf4\xef\xeb\x25\x67\x2b\xe1\xd1\x77\xce\xd4\xb8\x31\x59\xfa\xaa\x11\xc4\x29\xa1\x3c\xef\xbf\x36\x94\x2b\xeb\x58\x35\xbb\x3c\xad\x8d\x48\x18\xaa\x1b\xc1\xb2\x45\xba\x5b\x60\xdf\x5a\x1f\x19\xd2\xbf\x57\xf9\xee\x13\x38\xfb\xf5\x1e\xc9\x9e\xdd\x23\x0f\xeb\x78\xa2\x03\x5b\xd3\x69\x33\xc2\x57\xd2\x45\xcb\xe5\xfc\x62\x5e\x2c\x16\xcf\x78\xf6\x9f\x08\x7a\xd6\xbc\x8e\xf6\xfb\xeb\x0f\x28\x9d\x31\x68\xeb\xfd\x25\x68\xb8\x11\x7d\xdb\x29\x1f\x94\x4b\x67\x78\x05\xc5\x7e\x60\x4d\x32\x7d\xbf\x0a\x33\xd0\xe2\x1a\xf5\x0a\xa6\x8f\xdc\xef\x50\x0b\x62\x25\x09\x45\x90\xed\xb4\xaf\x90\x77\x3e\x91\x7a\x57\x0f\x6f\xee\xc1\xdd\x07\xec\x9a\x1b\x9c\xc6\x7c\x13\xaf\xd3\x74\x31\x52\x42\x35\x22\x5d\xf7\xa6\x47\xc7\x2b\xdb\x04\x31\x9d\x3c\x29\xfa\x81\x89\x77\x5a\xe7\x2f\xac\xf5\xb8\xa6\x1f\x56\x71\xfe\x4c\x15\xc7\x34\xe8\x65\xda\x73\x58\xd5\xe2\x6c\xf2\x4f\x00\x00\x00\xff\xff\x7c\x3b\xf9\x4c\xdb\x0b\x00\x00")

func assetsTuned07CrTunedYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned07CrTunedYaml,
		"assets/tuned/07-cr-tuned.yaml",
	)
}

func assetsTuned07CrTunedYaml() (*asset, error) {
	bytes, err := assetsTuned07CrTunedYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/07-cr-tuned.yaml", size: 3035, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tuned/01-service-account.yaml":      assetsTuned01ServiceAccountYaml,
	"assets/tuned/02-cluster-role.yaml":         assetsTuned02ClusterRoleYaml,
	"assets/tuned/03-cluster-role-binding.yaml": assetsTuned03ClusterRoleBindingYaml,
	"assets/tuned/04-cm-tuned-profiles.yaml":    assetsTuned04CmTunedProfilesYaml,
	"assets/tuned/05-cm-tuned-recommend.yaml":   assetsTuned05CmTunedRecommendYaml,
	"assets/tuned/06-ds-tuned.yaml":             assetsTuned06DsTunedYaml,
	"assets/tuned/07-cr-tuned.yaml":             assetsTuned07CrTunedYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"tuned": {nil, map[string]*bintree{
			"01-service-account.yaml":      {assetsTuned01ServiceAccountYaml, map[string]*bintree{}},
			"02-cluster-role.yaml":         {assetsTuned02ClusterRoleYaml, map[string]*bintree{}},
			"03-cluster-role-binding.yaml": {assetsTuned03ClusterRoleBindingYaml, map[string]*bintree{}},
			"04-cm-tuned-profiles.yaml":    {assetsTuned04CmTunedProfilesYaml, map[string]*bintree{}},
			"05-cm-tuned-recommend.yaml":   {assetsTuned05CmTunedRecommendYaml, map[string]*bintree{}},
			"06-ds-tuned.yaml":             {assetsTuned06DsTunedYaml, map[string]*bintree{}},
			"07-cr-tuned.yaml":             {assetsTuned07CrTunedYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
