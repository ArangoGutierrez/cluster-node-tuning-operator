// Code generated by go-bindata.
// sources:
// assets/tuned/01-namespace.yaml
// assets/tuned/02-service-account.yaml
// assets/tuned/03-scc-tuned.yaml
// assets/tuned/04-cluster-role.yaml
// assets/tuned/05-cluster-role-binding.yaml
// assets/tuned/06-cm-tuned-profiles.yaml
// assets/tuned/07-cm-tuned-recommend.yaml
// assets/tuned/08-ds-tuned.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTuned01NamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x78\x81\x03\xd1\x66\x08\x4a\x7a\x2b\xf9\x80\xc5\xe5\x3b\x8a\x7d\xcc\x8f\xa0\xa1\x7c\xd2\xd3\x69\x37\xac\x30\x67\x95\xf7\xa5\xbc\x8c\xbd\xca\x55\x07\x62\x6a\x43\x19\x48\xed\x9a\x5a\x8b\x88\x92\x9e\x9a\xe6\x8c\x2f\x45\x7c\x82\xf1\xb4\x7b\x9e\xcc\xcf\xf4\x8e\x2d\xb0\xa3\xa5\xaf\x2a\x45\x84\x3a\x50\xff\x69\x6b\xfb\x11\x89\xb5\xfd\x66\x1e\x34\x3e\xca\x27\x00\x00\xff\xff\x64\xcd\xee\x3d\x7f\x00\x00\x00")

func assetsTuned01NamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned01NamespaceYaml,
		"assets/tuned/01-namespace.yaml",
	)
}

func assetsTuned01NamespaceYaml() (*asset, error) {
	bytes, err := assetsTuned01NamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/01-namespace.yaml", size: 127, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned02ServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc7\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x78\x81\x14\xb4\xee\x98\x01\x89\xde\x72\x3e\x60\xc1\xfd\x44\x89\x73\xf3\xd3\x5c\xf9\x6c\xc4\x13\x73\x45\xa7\xca\x79\x2b\xdf\x60\x53\x79\x60\x9e\xe1\xb8\xbb\xf7\xcd\x2c\x07\xd2\x9a\xa5\x69\x11\xa1\x1d\x50\xc9\x4d\xb4\x4b\x6b\x98\x43\xa5\x0f\x70\x7d\xe2\x95\xd5\x7f\x7b\x25\x66\x65\x6f\xa8\xb9\x19\x7c\x97\x7f\x00\x00\x00\xff\xff\x65\xfe\xcc\xca\x67\x00\x00\x00")

func assetsTuned02ServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned02ServiceAccountYaml,
		"assets/tuned/02-service-account.yaml",
	)
}

func assetsTuned02ServiceAccountYaml() (*asset, error) {
	bytes, err := assetsTuned02ServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/02-service-account.yaml", size: 103, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned03SccTunedYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xbf\x6a\x23\x41\x0c\xc6\xfb\x79\x8a\xe9\x0c\x07\x5b\x5c\x3b\x9d\xf1\x71\x4e\x11\x12\xe3\x10\xf7\xca\xae\x76\x23\x3c\x2b\x0d\x92\xc6\xf6\xbe\x7d\x98\xe0\x10\x43\x4c\x4a\xe9\xfb\xc3\x8f\x0f\x0a\x1d\x50\x8d\x84\x53\x3c\xfd\x0d\x47\xe2\x21\xc5\x17\xec\xab\x92\x2f\x1b\x61\xc7\x8b\x6f\x84\xcd\x15\x88\xdd\xc2\x8c\x0e\x03\x38\xa4\x10\x23\x30\x8b\x83\x93\xb0\xb5\x93\x61\xc6\x14\xa5\x20\xdb\x3b\x8d\xde\xf5\xb9\x9a\xa3\x76\x2c\x03\x76\x5e\x99\x78\x0a\x90\xb3\x9c\x1f\xc4\xfc\x1f\xe9\x41\x72\x9d\x71\x97\xeb\x44\x9c\xa2\x6b\xc5\x6f\xf9\x09\xfd\x2c\x7a\xbc\x7d\xef\x94\x4e\x94\x71\xc2\xa1\x61\x01\x31\xea\xad\x8c\xc3\x06\x0a\xbc\x51\x26\x27\xb4\x14\xba\xb8\xfa\xb3\x0a\xa3\x6d\x55\x6a\x69\x78\xbe\x14\x4c\x71\x5f\x79\x6d\x6b\x5e\xc2\xd4\xfe\x9f\x3e\x5b\xcc\x71\x4e\x0d\xd3\x82\x22\x0c\xcf\x9c\x97\xbd\x88\xff\xa7\x8c\x57\x31\x8e\x90\x0d\x83\xb6\xf4\xab\xa1\xde\x29\x34\x7c\x24\xae\x97\xeb\x66\x77\x0d\x7d\x2f\x73\xd9\xa9\x8c\xad\xf8\x0b\xd1\x6a\x29\x19\x67\x64\x87\xbc\xbd\x42\xfd\xc8\x56\x43\xbd\x85\x35\xd4\x13\xf5\x08\x7d\x2f\x95\x3d\xfd\x3a\x7a\xf2\xca\x38\x84\x8f\x00\x00\x00\xff\xff\x15\x71\x4f\x5c\xea\x01\x00\x00")

func assetsTuned03SccTunedYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned03SccTunedYaml,
		"assets/tuned/03-scc-tuned.yaml",
	)
}

func assetsTuned03SccTunedYaml() (*asset, error) {
	bytes, err := assetsTuned03SccTunedYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/03-scc-tuned.yaml", size: 490, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned04ClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8c\xb1\x6a\x03\x41\x0c\x05\x7b\x7d\x85\x70\xbf\x17\xd2\x85\x6d\x53\xa4\x4f\x91\x5e\xde\x15\xb6\xf0\x5a\x3a\x24\xed\x05\xf2\xf5\xe1\x7c\x57\xbd\xc7\xc0\xcc\x43\xb4\x57\xfc\x1c\x33\x92\xfd\xdb\x06\x03\xad\xf2\xc3\x1e\x62\x5a\xd1\xaf\xd4\x16\x9a\x79\x37\x97\x3f\x4a\x31\x5d\x1e\x1f\xb1\x88\xbd\x6d\xef\xf0\xe4\xa4\x4e\x49\x15\x10\x95\x9e\x5c\xb1\x1d\x99\xa2\xd6\xb9\xe4\x54\xd1\x5b\xcd\xa9\xdc\xc1\xe7\xe0\xa8\x50\x90\x56\xf9\x72\x9b\x6b\xec\x56\xc1\xcb\x05\x10\x9d\xc3\xa6\x37\x3e\xd9\x6e\x07\x20\x6e\xec\xd7\x13\xdd\x38\x5f\x3b\x24\x8e\xf3\x4b\xd9\xee\xf0\x1f\x00\x00\xff\xff\x04\x60\x32\xd4\xbd\x00\x00\x00")

func assetsTuned04ClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned04ClusterRoleYaml,
		"assets/tuned/04-cluster-role.yaml",
	)
}

func assetsTuned04ClusterRoleYaml() (*asset, error) {
	bytes, err := assetsTuned04ClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/04-cluster-role.yaml", size: 189, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned05ClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xb1\x4e\xc3\x40\x0c\xc6\xf1\xfd\x9e\xe2\x5e\x20\x41\x6c\xc8\x1b\xb0\x33\x14\x89\xdd\xbd\xfb\xda\x9a\x26\x76\x74\xf6\x55\x82\xa7\x47\x51\x2a\x16\x10\xa2\xfb\xdf\xbf\x4f\xe6\x45\xde\xd0\x5c\x4c\x29\xb7\x3d\x97\x91\x7b\x9c\xac\xc9\x27\x87\x98\x8e\xe7\x07\x1f\xc5\xee\x2e\xf7\xe9\x2c\x5a\x29\x3f\x4f\xdd\x03\x6d\x67\x13\x9e\x44\xab\xe8\x31\xcd\x08\xae\x1c\x4c\x29\x67\xe5\x19\x94\xcb\x16\x0d\x6a\x15\x43\x74\x15\x3d\x52\x74\x45\x4d\xcd\x26\xec\x70\x58\xd3\x1f\xde\x3f\xce\xb7\xc2\x17\x2e\xa0\x6c\x0b\xd4\x4f\x72\x88\xe1\x97\x83\xe4\x7d\xff\x8e\x12\x4e\x69\xb8\x4e\xbd\xa2\x5d\xa4\xe0\xb1\x14\xeb\x1a\xdf\x6b\x37\xcb\xdd\xd1\x5e\xd6\x78\xa5\xfd\xc3\x03\x33\xf9\x66\xf3\x66\xd3\x9f\xc0\xf5\x97\xaf\x00\x00\x00\xff\xff\xc1\xcb\xc9\x87\x79\x01\x00\x00")

func assetsTuned05ClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned05ClusterRoleBindingYaml,
		"assets/tuned/05-cluster-role-binding.yaml",
	)
}

func assetsTuned05ClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsTuned05ClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/05-cluster-role-binding.yaml", size: 377, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned06CmTunedProfilesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x51\x6f\xdb\x46\x0c\x7e\xf7\xaf\x20\xda\x3d\x24\x58\xa5\x45\x49\x9c\x76\x06\xb4\x97\x2c\x40\x1f\x56\xa4\x58\xba\xbd\x0c\x83\x70\x3d\x51\x16\xe1\x3b\xde\xe1\xc8\xb3\xe3\x6e\xfb\xef\x83\x14\xd9\x4e\xb2\x04\x48\x57\x3f\x59\x77\xe4\xf7\xf1\x23\x3f\x4a\x26\xd2\xef\x98\x84\x02\x2f\x60\x5d\xcd\x56\xc4\xed\x02\x2e\x03\x77\xb4\xfc\x60\xe2\xcc\xa3\x9a\xd6\xa8\x59\xcc\x00\xd8\x78\x5c\x80\x66\xc6\xb6\x88\x29\x74\xe4\x50\xa6\x63\x89\xc6\xe2\x02\x42\x44\x96\x9e\x3a\x2d\xac\xcb\xa2\x98\x0a\x0e\x2d\x16\x9a\x99\x78\x39\xdb\xe1\x3c\x44\x28\xc6\x63\xf8\x7b\x06\x00\x07\x80\xdd\x01\xc0\x1f\xde\x10\xff\x39\x3d\x48\xf6\xde\xa4\x6d\x7d\x1d\x95\x3c\x7d\x41\x90\xad\x28\x7a\x81\x94\x79\xe0\x80\xeb\x88\x7c\x33\x00\xc0\x51\x34\x09\x59\x61\xe2\x39\x9e\x10\x88\xad\xcb\x2d\xd6\xdf\xfd\xd5\x2d\xd6\x94\xb4\xb1\x3d\xda\xd5\xf8\x37\x1b\x57\x2c\x33\x8a\x2e\xb4\x4f\x21\x2f\xfb\x98\xb5\x88\x98\xba\x90\xbc\x61\x8b\xff\xcc\x76\x25\x09\x3a\xe2\x7c\xbb\xab\xca\xac\x6d\x63\x8d\xed\xb1\xd1\x3e\xa1\xf4\xc1\xb5\xf5\xbb\xea\xc7\xd3\x7d\x3c\xa3\xee\x62\xb9\x6b\x6c\x60\xd6\x64\xec\xaa\xe9\x8d\xf4\x42\x5f\xb0\xae\xce\xaa\x93\xb7\x87\x78\xd9\x8a\x55\xb7\x4f\x41\x2d\x29\xae\xcf\x4b\x8a\x4d\x17\xd2\xc6\xa4\xb6\xae\xa6\xbb\x15\x26\x46\x57\x46\x6a\x1b\x6f\x6e\xeb\x9f\x26\xa0\x43\x22\xa3\x76\xe4\x14\x53\xf9\x80\x79\x08\xae\x4e\xce\xdf\xcd\xdf\x5e\x3c\x66\x61\xa4\x65\x5f\xb6\xd8\x99\xec\xb4\x5c\xda\x49\x54\x75\x27\xe9\x65\xc1\xa7\xf5\xd9\xe9\xdb\x8b\x77\x2f\x8c\x3e\xab\x2f\xe6\xf3\xb3\x47\x85\x5c\x7c\x4d\x21\xcf\x06\x3f\x59\xc8\xb3\xd1\xf7\x0b\xb9\xe7\xe5\xc0\x9a\x82\x2b\xa2\x33\x8c\xdf\x6e\xcc\x09\x0e\x46\xb8\x47\xae\xdc\x93\x3e\x63\x85\xd7\xb0\x1a\xb6\x07\xee\x4e\x41\x50\x95\x78\x29\x6f\xc0\x9b\xdb\x81\x77\x60\xa2\x1f\x02\x1c\x0c\xbc\x4b\xdc\x03\x7c\x20\x26\x6f\x1c\xc4\x84\xe8\xa3\x52\x60\x58\x26\xc3\xd9\x99\x44\xba\x85\x2e\x24\xb8\xfc\xf8\x5b\xf1\x39\x64\x6e\x41\x8d\xac\x64\xb1\xcf\x3d\x9a\x3a\xb6\x80\x0a\xbc\xa0\x7d\x0d\x70\x54\xc1\xf7\x40\x2e\x2c\x8f\xd8\xc6\x2c\xc7\xc7\x6f\x20\x33\xa9\x2c\x80\x0d\x07\x41\x1b\xb8\x95\xe3\x87\x6e\x15\xdb\x63\xdb\x78\xe2\xe6\x1e\x73\xc3\x52\x57\x27\x77\xbf\x3d\xe1\xa7\x1e\x41\x83\x1a\x07\x4a\x1e\x41\x7b\x84\x31\x39\x3b\x4c\xb0\x21\xe7\x86\x6e\x0a\xb5\x98\xc0\x80\xa7\x65\x32\x8a\xed\xb0\xf2\x16\x45\xf6\x28\xaf\xc6\xe5\x84\x3e\xe8\x2b\x30\x83\xaa\x3e\x0b\x38\x14\x01\x47\x2b\x74\x5b\xd0\x00\x9f\x11\x12\x16\x3b\x88\x83\xe2\xbb\x39\xc2\x24\x1c\x48\x60\x3e\x96\xf8\x06\xa8\xc4\x12\x4e\xca\x39\xf8\xe7\xf4\x0d\x58\x14\xb8\xb1\x41\x74\x90\x37\x7f\xa4\xee\xe6\xf2\xfd\xd5\xcf\xcd\xf5\xa7\xf7\x57\xbf\xc2\xc6\xac\xb0\xc8\xf1\xfe\x2c\xca\xff\xcc\xee\xe3\xd3\x33\xdb\xf4\xc8\x77\xa3\x1a\x61\x20\xc7\x12\xe0\x97\xb0\xc1\x34\x76\x6c\x6d\x5c\x1e\xda\xb8\x87\x21\x1f\x53\x58\xe3\x9e\xd3\x19\x45\xb6\xdb\xa9\x37\x3b\xe7\x8c\x56\xd8\x5d\xd9\x44\x4a\x76\x98\xc3\x40\x53\x3e\xa5\x77\x40\xcb\xf1\xf1\x48\xcf\xef\x69\x3e\xac\xd4\xf0\x59\xf8\xf6\x4d\x1a\x50\xe4\x2b\x37\x68\xff\x2e\x52\x1b\x9b\xce\x88\x0e\x09\xf5\xd9\x74\xdb\x49\x49\x1c\x94\xba\x6d\xe9\xcd\x6d\x93\x05\x53\xb3\x31\x6a\x7b\x94\x27\x5f\x0d\xe3\xe7\x0d\xe5\xff\x4a\xb9\xba\x81\xc0\x2f\x15\x34\x92\x3d\xa3\x6a\xed\xc7\x7a\xbd\x89\x8d\x0d\x99\xb5\x3e\xbd\x38\xad\xce\xcf\x67\xff\x06\x00\x00\xff\xff\xf1\xd3\xac\x67\xde\x07\x00\x00")

func assetsTuned06CmTunedProfilesYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned06CmTunedProfilesYaml,
		"assets/tuned/06-cm-tuned-profiles.yaml",
	)
}

func assetsTuned06CmTunedProfilesYaml() (*asset, error) {
	bytes, err := assetsTuned06CmTunedProfilesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/06-cm-tuned-profiles.yaml", size: 2014, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned07CmTunedRecommendYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd0\x3f\x4b\x04\x31\x10\x05\xf0\x3e\x9f\x62\xc0\x4e\xf6\x0f\xb6\x81\xab\xb4\xd5\x6b\xc4\x46\x2c\x66\xb3\xb3\xbb\xe1\xb2\x93\x90\x99\x1c\x16\x7e\x78\xd9\xdc\x89\x87\x68\x21\x5c\x15\x78\x24\xbf\xf7\x08\x26\xff\x42\x59\x7c\x64\x0b\xc7\x3b\x73\xf0\x3c\x5a\xb8\x8f\x3c\xf9\xf9\x11\x93\x59\x49\x71\x44\x45\x6b\x00\x18\x57\xb2\xa0\x85\x69\x6c\x33\xb9\xb8\xae\xc4\xe3\x39\x97\x84\x8e\x2c\xc4\x44\x2c\x8b\x9f\xb4\x75\xa1\x88\x52\x6e\x39\x8e\xd4\x6a\x61\xcf\xb3\xf9\x82\x4e\x44\x74\xe9\x9b\xb1\xf0\x61\x00\x00\x5e\x2f\x84\xc8\x9a\x63\x68\x53\x40\xa6\x66\xc5\x8d\x7b\xab\x97\xfa\x23\xe6\x3e\xf8\xa1\xaf\x50\xbf\x41\xb5\x26\xe0\x40\x41\x3a\x37\xcd\xbb\xee\xb6\x26\x39\x06\xea\x0e\x65\xa0\xcc\xa4\x24\x9d\x8f\xfd\x09\xda\x69\x2e\x64\xaa\x76\x03\x4f\x11\xa4\xb8\x05\xea\x7b\xa0\x77\x2f\x2a\x0d\x3c\xef\x1f\xf6\x3f\x37\x55\x94\xa4\x39\x9f\x57\x98\x43\x01\x45\xbd\x13\xc2\xec\x96\x8b\x55\x7f\x7e\xc4\x06\x5d\xa1\xd7\xf3\x94\xf1\xf7\xbe\x7f\x36\x98\xcf\x00\x00\x00\xff\xff\xfe\xb3\x5a\x52\x43\x02\x00\x00")

func assetsTuned07CmTunedRecommendYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned07CmTunedRecommendYaml,
		"assets/tuned/07-cm-tuned-recommend.yaml",
	)
}

func assetsTuned07CmTunedRecommendYaml() (*asset, error) {
	bytes, err := assetsTuned07CmTunedRecommendYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/07-cm-tuned-recommend.yaml", size: 579, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned08DsTunedYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x5d\x6f\x1a\x3b\x10\x7d\xe7\x57\x8c\xf2\xbe\x6c\xae\xae\xee\x7d\xd8\xb7\x88\x90\xaa\x52\x21\x28\x54\x95\xfa\x14\x0d\xf6\x00\x2e\xfe\x92\x3d\xbb\x29\xaa\xfa\xdf\x2b\x67\x3f\xf0\x06\x68\xaa\xee\x13\x78\xce\x1c\xcf\x99\x39\x1e\xf4\xea\x0b\x85\xa8\x9c\xad\x00\xbd\x8f\x65\xf3\xcf\xe4\xa0\xac\xac\xe0\x1e\xc9\x38\xbb\x26\x9e\x18\x62\x94\xc8\x58\x4d\x00\x2c\x1a\xaa\x80\x6b\x4b\xb2\xfb\x17\x3d\x0a\xaa\xc0\x79\xb2\x71\xaf\xb6\x5c\x08\x5d\x47\xa6\x50\x58\x27\xa9\xe0\xda\x2a\xbb\x9b\x00\x68\xdc\x90\x8e\x89\x02\x32\x2c\x7a\xdf\xb3\x45\x4f\x22\x85\x23\x69\x12\xec\x42\x0b\x35\xc8\x62\xff\x29\xcb\xbd\x92\x0d\xc0\x64\xbc\x46\xa6\x2e\x2f\xab\x39\x7d\x7a\x44\x71\x95\x04\xa0\x2f\xe3\xf5\x37\x85\x46\x09\xba\x13\xc2\xd5\x96\x97\x23\xe9\xe9\xc3\x9a\x9d\x49\xa1\xf5\x08\xf8\xd9\x1d\xc8\x56\xc0\xa1\xa6\x0e\x28\x9c\x65\x54\x96\xc2\x50\x41\x01\xc2\x19\x83\x56\x9e\x4a\x2a\xa0\x6c\x30\x94\x5a\x6d\xca\xd7\x4b\xca\x8d\xb2\x65\xa8\xed\x00\x50\x06\x77\x54\x81\x74\xe2\x40\x61\xaa\x5c\xf9\xcd\x90\x15\x78\x68\xe1\x85\x77\x62\x0c\x5d\xd5\x5a\xaf\x9c\x56\xe2\x58\xc1\x9d\x7e\xc1\x63\x1c\xe2\xf6\x4c\x0b\x40\xa0\xe8\xea\x20\x28\x56\xf0\xe3\xe7\x70\x1a\x49\xd4\x41\xf1\x71\xe6\x2c\xd3\x77\x3e\x95\x0b\xe0\x83\x6a\x94\xa6\x1d\xc9\x91\xd8\x34\x8a\x60\x94\x45\x56\xce\x2e\x28\xc6\x54\x0a\xf2\xbe\x82\x52\x52\x53\x66\xc1\x42\xbb\xdd\xef\x92\xba\xda\x1f\x94\x3e\x71\x37\x4e\xd7\x86\x16\xa9\xcf\x31\xef\x5d\xab\x88\x58\x14\x6d\x37\x02\xa5\x06\x93\x95\x59\xc1\xaf\xb3\xea\x4a\x21\x16\x5d\x9b\x07\xe4\x54\x9e\xf1\x35\x18\x0a\xad\x36\x1d\xa7\x0f\x6e\xab\x34\xc5\x22\x39\xeb\x0a\xef\x78\x84\x97\x33\x7a\xf6\x98\x4d\x64\xcc\x92\x47\xc8\x36\x79\xd7\xfb\xe4\xc7\xd9\xea\x79\xf9\x78\x3f\x7f\x5e\xde\x2d\xe6\x59\x1c\xa0\x41\x5d\xd3\x43\x70\xa6\x1a\x1d\x03\x6c\x15\x69\xf9\x44\xdb\xb7\xe7\x5d\xa4\xbd\x3b\x3d\x80\x69\x7a\xbb\xc9\xef\x17\xee\x7d\x9a\xaf\xbf\x2e\x67\xcf\xab\xf9\xd3\xc7\xc7\xfb\xf3\x7b\x2b\xb8\xf9\xff\xf6\x66\x92\x0f\x2b\x33\xfd\xb9\xee\xbd\x8b\xad\xe8\xdc\x58\x6f\x9b\x90\x5e\x8b\xdd\xaa\xdd\x02\x7d\x8e\x53\x4c\x26\x8e\x7b\x73\xa0\x63\xe7\xeb\xc2\x09\x7f\xd1\x05\x3d\xff\x7f\xb7\xc5\xb0\x05\xa6\x89\x3f\xc3\x64\xef\xe3\x22\x87\xf3\xc9\xa7\xa8\xdf\x18\xff\x3d\x13\xfe\x95\x8e\x6b\xae\xeb\x75\x8c\x51\xd3\x23\x1a\x7d\x45\x49\x8f\xf9\x53\x21\xef\xbb\x5f\xda\xd8\xbf\xd2\x59\xbb\xf6\x1f\x54\x88\x3c\x39\xcd\x76\x49\xfc\xe2\xc2\x61\xc4\x1f\x28\x32\x06\xbe\xb8\x9b\xa2\xd8\x93\xac\x35\x85\x76\xdd\x4a\xda\x62\xad\xb9\x18\x8e\x87\xd5\x3c\x5e\x4b\xa7\x95\x95\xed\x91\x0f\x01\x05\xad\x28\x28\x27\xd7\x24\x9c\x95\xb1\x82\x7f\x6f\x27\xbf\x02\x00\x00\xff\xff\x93\x1c\xd8\xe9\xf4\x06\x00\x00")

func assetsTuned08DsTunedYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned08DsTunedYaml,
		"assets/tuned/08-ds-tuned.yaml",
	)
}

func assetsTuned08DsTunedYaml() (*asset, error) {
	bytes, err := assetsTuned08DsTunedYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/08-ds-tuned.yaml", size: 1780, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tuned/01-namespace.yaml": assetsTuned01NamespaceYaml,
	"assets/tuned/02-service-account.yaml": assetsTuned02ServiceAccountYaml,
	"assets/tuned/03-scc-tuned.yaml": assetsTuned03SccTunedYaml,
	"assets/tuned/04-cluster-role.yaml": assetsTuned04ClusterRoleYaml,
	"assets/tuned/05-cluster-role-binding.yaml": assetsTuned05ClusterRoleBindingYaml,
	"assets/tuned/06-cm-tuned-profiles.yaml": assetsTuned06CmTunedProfilesYaml,
	"assets/tuned/07-cm-tuned-recommend.yaml": assetsTuned07CmTunedRecommendYaml,
	"assets/tuned/08-ds-tuned.yaml": assetsTuned08DsTunedYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"tuned": &bintree{nil, map[string]*bintree{
			"01-namespace.yaml": &bintree{assetsTuned01NamespaceYaml, map[string]*bintree{}},
			"02-service-account.yaml": &bintree{assetsTuned02ServiceAccountYaml, map[string]*bintree{}},
			"03-scc-tuned.yaml": &bintree{assetsTuned03SccTunedYaml, map[string]*bintree{}},
			"04-cluster-role.yaml": &bintree{assetsTuned04ClusterRoleYaml, map[string]*bintree{}},
			"05-cluster-role-binding.yaml": &bintree{assetsTuned05ClusterRoleBindingYaml, map[string]*bintree{}},
			"06-cm-tuned-profiles.yaml": &bintree{assetsTuned06CmTunedProfilesYaml, map[string]*bintree{}},
			"07-cm-tuned-recommend.yaml": &bintree{assetsTuned07CmTunedRecommendYaml, map[string]*bintree{}},
			"08-ds-tuned.yaml": &bintree{assetsTuned08DsTunedYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

