// Code generated by go-bindata.
// sources:
// assets/tuned/01-namespace.yaml
// assets/tuned/02-service-account.yaml
// assets/tuned/03-cluster-role.yaml
// assets/tuned/04-cluster-role-binding.yaml
// assets/tuned/05-cm-tuned-profiles.yaml
// assets/tuned/06-cm-tuned-recommend.yaml
// assets/tuned/07-ds-tuned.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTuned01NamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x78\x81\x03\xd1\x66\x08\x4a\x7a\x2b\xf9\x80\xc5\xe5\x3b\x8a\x7d\xcc\x8f\xa0\xa1\x7c\xd2\xd3\x69\x37\xac\x30\x67\x95\xf7\xa5\xbc\x8c\xbd\xca\x55\x07\x62\x6a\x43\x19\x48\xed\x9a\x5a\x8b\x88\x92\x9e\x9a\xe6\x8c\x2f\x45\x7c\x82\xf1\xb4\x7b\x9e\xcc\xcf\xf4\x8e\x2d\xb0\xa3\xa5\xaf\x2a\x45\x84\x3a\x50\xff\x69\x6b\xfb\x11\x89\xb5\xfd\x66\x1e\x34\x3e\xca\x27\x00\x00\xff\xff\x64\xcd\xee\x3d\x7f\x00\x00\x00")

func assetsTuned01NamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned01NamespaceYaml,
		"assets/tuned/01-namespace.yaml",
	)
}

func assetsTuned01NamespaceYaml() (*asset, error) {
	bytes, err := assetsTuned01NamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/01-namespace.yaml", size: 127, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned02ServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc7\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x78\x81\x14\xb4\xee\x98\x01\x89\xde\x72\x3e\x60\xc1\xfd\x44\x89\x73\xf3\xd3\x5c\xf9\x6c\xc4\x13\x73\x45\xa7\xca\x79\x2b\xdf\x60\x53\x79\x60\x9e\xe1\xb8\xbb\xf7\xcd\x2c\x07\xd2\x9a\xa5\x69\x11\xa1\x1d\x50\xc9\x4d\xb4\x4b\x6b\x98\x43\xa5\x0f\x70\x7d\xe2\x95\xd5\x7f\x7b\x25\x66\x65\x6f\xa8\xb9\x19\x7c\x97\x7f\x00\x00\x00\xff\xff\x65\xfe\xcc\xca\x67\x00\x00\x00")

func assetsTuned02ServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned02ServiceAccountYaml,
		"assets/tuned/02-service-account.yaml",
	)
}

func assetsTuned02ServiceAccountYaml() (*asset, error) {
	bytes, err := assetsTuned02ServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/02-service-account.yaml", size: 103, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned03ClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x3f\x4f\xfc\x30\x0c\x40\xf7\x7c\x8a\x28\xf3\xaf\xfd\x89\x0d\x65\x65\x60\x63\x60\x60\x41\x1d\x7c\xa9\x69\xad\x4b\xed\xc8\x76\xca\x9f\x4f\x8f\xae\x27\x06\x8e\xc9\xd2\xb3\xdf\x33\x34\x7a\x41\x35\x12\xce\x51\x4f\x50\x46\xe8\xbe\x8a\xd2\x17\x38\x09\x8f\xe7\x7b\x1b\x49\xfe\xef\x77\xe1\x4c\x3c\xe7\xf8\x50\xbb\x39\xea\xb3\x54\x0c\x1b\x3a\xcc\xe0\x90\x43\x8c\x0c\x1b\xe6\x58\xae\xdb\x81\x65\xc6\xc1\x3b\x13\x2f\xd9\x3b\xe3\x1c\xb4\x57\xb4\x1c\x86\x08\x8d\x1e\x55\x7a\xb3\x1c\x5f\x53\x9a\x42\x8c\x8a\x26\x5d\x0b\x1e\xe4\x62\xda\x81\x77\xd4\xd3\x81\x16\xf4\xf4\x2f\x55\xb2\xcb\x78\x07\x2f\x6b\x9a\x6e\x43\x86\xa5\x2b\xf9\xe7\x28\x0d\xd9\x56\x7a\xf3\x91\xe4\x6f\xfd\xe7\xac\x08\x3b\x7e\x78\x11\x36\x57\x20\xf6\x9b\x97\xdd\xf0\x97\xfc\x04\xdb\x35\xd0\x94\x76\xaa\xb8\xe0\x9c\xa6\xf0\x1d\x00\x00\xff\xff\x0d\x41\x2b\x61\x3b\x01\x00\x00")

func assetsTuned03ClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned03ClusterRoleYaml,
		"assets/tuned/03-cluster-role.yaml",
	)
}

func assetsTuned03ClusterRoleYaml() (*asset, error) {
	bytes, err := assetsTuned03ClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/03-cluster-role.yaml", size: 315, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned04ClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xb1\x4e\xc3\x40\x0c\xc6\xf1\xfd\x9e\xe2\x5e\x20\x41\x6c\xc8\x1b\xb0\x33\x14\x89\xdd\xbd\xfb\xda\x9a\x26\x76\x74\xf6\x55\x82\xa7\x47\x51\x2a\x16\x10\xa2\xfb\xdf\xbf\x4f\xe6\x45\xde\xd0\x5c\x4c\x29\xb7\x3d\x97\x91\x7b\x9c\xac\xc9\x27\x87\x98\x8e\xe7\x07\x1f\xc5\xee\x2e\xf7\xe9\x2c\x5a\x29\x3f\x4f\xdd\x03\x6d\x67\x13\x9e\x44\xab\xe8\x31\xcd\x08\xae\x1c\x4c\x29\x67\xe5\x19\x94\xcb\x16\x0d\x6a\x15\x43\x74\x15\x3d\x52\x74\x45\x4d\xcd\x26\xec\x70\x58\xd3\x1f\xde\x3f\xce\xb7\xc2\x17\x2e\xa0\x6c\x0b\xd4\x4f\x72\x88\xe1\x97\x83\xe4\x7d\xff\x8e\x12\x4e\x69\xb8\x4e\xbd\xa2\x5d\xa4\xe0\xb1\x14\xeb\x1a\xdf\x6b\x37\xcb\xdd\xd1\x5e\xd6\x78\xa5\xfd\xc3\x03\x33\xf9\x66\xf3\x66\xd3\x9f\xc0\xf5\x97\xaf\x00\x00\x00\xff\xff\xc1\xcb\xc9\x87\x79\x01\x00\x00")

func assetsTuned04ClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned04ClusterRoleBindingYaml,
		"assets/tuned/04-cluster-role-binding.yaml",
	)
}

func assetsTuned04ClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsTuned04ClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/04-cluster-role-binding.yaml", size: 377, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned05CmTunedProfilesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xa1\x0e\xc2\x40\x0c\x00\x50\x7f\x5f\xd1\xcc\x57\x60\x6b\xd1\x58\x7c\xb3\xeb\x46\xc3\xd6\x36\xd7\x1e\xdf\x4f\x42\x40\x60\x9f\x78\x1c\x7a\x97\x91\xea\x46\xf0\xba\xb4\xa7\x5a\x27\xb8\xba\x6d\xba\xdf\x38\xda\x29\xc5\x9d\x8b\xa9\x01\x18\x9f\x42\x50\xd3\xa4\x63\x0c\xdf\xf4\x90\xfc\x72\x06\xaf\x42\xe0\x21\x96\x0f\xdd\x0a\xd7\x63\x66\xc9\x40\xf3\x2e\x58\xd3\xd4\xf6\xf6\x7b\xfe\x07\xfc\x30\x2c\x4b\x7b\x07\x00\x00\xff\xff\xaf\xf7\x0b\x59\x8b\x00\x00\x00")

func assetsTuned05CmTunedProfilesYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned05CmTunedProfilesYaml,
		"assets/tuned/05-cm-tuned-profiles.yaml",
	)
}

func assetsTuned05CmTunedProfilesYaml() (*asset, error) {
	bytes, err := assetsTuned05CmTunedProfilesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/05-cm-tuned-profiles.yaml", size: 139, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned06CmTunedRecommendYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xa1\x0e\x02\x31\x0c\x06\x60\xbf\xa7\x68\xce\x4f\x60\x6b\xd1\x58\x7c\xb3\xf5\x8e\x06\xf6\x77\xd9\x3a\x9e\x1f\x01\xe4\xec\x27\x3e\xe9\x76\xd7\x31\xcd\xc1\xf4\xbe\xa4\xa7\xa1\x32\x5d\x1d\xbb\x1d\x37\xe9\xa9\x69\x48\x95\x10\x4e\x44\x90\xa6\x4c\xb1\xa0\x35\x0f\x2d\xde\x9a\xa2\xfe\x7c\x76\x29\xca\xe4\x5d\x31\x1f\xb6\x47\x2e\xaf\x35\x43\x47\x86\x57\xcd\xb1\x60\x38\xd2\x3f\xfa\x16\x5e\xfa\xd9\x30\x6d\x5b\xfa\x04\x00\x00\xff\xff\x46\xa1\xbc\x42\x8c\x00\x00\x00")

func assetsTuned06CmTunedRecommendYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned06CmTunedRecommendYaml,
		"assets/tuned/06-cm-tuned-recommend.yaml",
	)
}

func assetsTuned06CmTunedRecommendYaml() (*asset, error) {
	bytes, err := assetsTuned06CmTunedRecommendYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/06-cm-tuned-recommend.yaml", size: 140, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned07DsTunedYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x0c\xb6\xbd\x2a\x4a\x51\xb4\x07\xdd\x02\xc7\x59\x2c\xb0\x76\x8c\x38\x5b\xa0\xa7\x60\x4c\x8e\x6d\x22\x14\x29\x70\x86\xda\x35\x16\xfd\xef\x05\x2d\xd9\x96\x2c\xcb\x29\xaa\x4b\x62\xce\xe3\x9b\x8f\x37\x33\xc4\xca\xfc\x45\x81\x8d\x77\x05\x60\x55\x71\x5e\xff\x36\x79\x37\x4e\x17\xf0\x88\x54\x7a\xb7\x22\x99\x94\x24\xa8\x51\xb0\x98\x00\x38\x2c\xa9\x00\x89\x8e\x74\xfb\x8b\x2b\x54\x54\x80\xaf\xc8\xf1\xce\x6c\x24\x53\x36\xb2\x50\xc8\x9c\xd7\x94\x49\x74\xc6\x6d\x27\x00\x16\xd7\x64\x39\x51\x40\x07\x8b\x55\x75\x64\xe3\x8a\x54\x32\x33\x59\x52\xe2\x43\x03\x2d\x51\xd4\xee\x6b\xe7\xee\xc8\x6d\x00\xa1\xb2\xb2\x28\xd4\xde\xeb\xc4\x9c\x3e\xdb\xa3\x18\x25\x01\x38\x86\x71\xf8\x9f\x42\x6d\x14\x3d\x28\xe5\xa3\x93\x45\x2f\xf5\xf4\x61\x14\x5f\x26\xd3\xaa\x07\x7c\xf5\xef\xe4\x0a\x90\x10\xa9\x05\x2a\xef\x04\x8d\xa3\x70\x8a\x20\x03\xe5\xcb\x12\x9d\x3e\x87\x94\x41\x5e\x63\xc8\xad\x59\xe7\x07\x27\xf9\xda\xb8\x3c\x44\x77\x02\x98\x12\xb7\x54\xc0\xaf\x3f\xa7\x5f\xbf\xad\x5e\x67\x2f\x6f\x8b\xe7\xc7\xd9\xdb\xeb\xb7\xc5\xec\xf1\xed\xcb\xfc\xe1\xf3\xec\x9f\x3e\x74\x19\xad\x5d\x7a\x6b\xd4\xbe\x80\x07\xfb\x1d\xf7\x7c\xb2\xbb\x41\x2e\x00\x81\xd8\xc7\xa0\x88\x0b\xf8\x79\x66\x62\x52\x31\x18\xd9\x4f\xbd\x13\xfa\x21\xe7\x70\x01\xaa\x60\x6a\x63\x69\x4b\xba\x97\x6c\x92\x22\x94\xc6\xa1\x18\xef\xe6\xc4\x9c\x42\x41\xd9\x15\x90\x6b\xaa\xf3\x8e\x31\xb3\x7e\x7b\xeb\x52\x1b\xfb\x93\xb1\x67\xee\xda\xdb\x58\xd2\x3c\xd5\x99\xbb\xb5\x3b\xe8\xd0\xba\x21\x51\x6d\x09\x03\xa5\x32\x93\xd3\x77\xba\x13\x78\x93\x3d\x89\xca\x0e\xa8\xec\x84\x1a\xe1\xeb\xcb\x52\x05\xbf\x31\x96\x38\x4b\xfd\x35\x60\xad\x31\x64\xd6\xac\x5b\xe6\xeb\xd8\x3e\x3b\x77\x74\x39\xb2\x74\xcf\x86\xb1\x84\xe8\x72\xbd\x8e\xc3\x6b\xc9\x79\x88\x2e\xbb\x30\x06\x42\xfd\xec\xec\xfe\x42\xa6\x3e\x71\x22\xe5\x3d\x0b\x95\xba\xfd\x3b\xa0\x4f\xd4\x2d\x24\x1b\x40\x46\x9c\x90\xab\xbb\x3d\x93\xb5\x54\xcf\xd3\x65\xd3\xbe\x8b\x87\xf9\xac\x63\x07\xa8\xd1\x46\x7a\x0a\xbe\x2c\x7a\xc7\x00\x1b\x43\x56\xbf\xd0\xe6\xf2\xbc\xb5\x34\x69\xa4\xf1\xbd\x4b\x9b\x27\x4d\xeb\x15\xbf\x2f\xb3\xd5\xdf\x8b\xe9\xdb\x72\xf6\xf2\xe5\xf9\x71\xe8\xb7\x80\x4f\x7f\xde\x7f\x6a\xcf\x9b\x56\xeb\x8c\xec\xce\x73\x53\xad\xee\x10\x0c\x45\xbc\x94\xf0\xe6\xc5\xab\x7a\x8e\xaa\x79\x93\xea\x86\x82\x1f\xe8\x97\xb6\x91\xdb\x98\xed\x1c\xab\x2e\xaf\x11\x2a\xb9\xaf\xde\x3b\xed\xdb\xbd\x91\x79\x55\x5d\x99\x9c\x73\x3c\x7f\xdc\x67\xa7\x2d\x7b\x97\xf8\x07\xfd\x34\x36\x7d\x69\x3d\xa7\x3d\x80\xf6\xa2\x99\x3e\x1a\xdc\xff\x95\xc7\xd8\x3c\x1f\xf3\xe8\xa3\xee\xf6\x58\xda\x91\x4c\x8e\x98\xff\x9a\xc8\xc7\xbb\x42\x3b\x3e\x6e\xc1\x69\xf3\xac\x3e\x99\xc0\xd2\x5a\x53\x2f\x2c\x48\xbe\xfb\xf0\xde\xe3\x0f\xc4\x82\x41\xae\xee\x7e\x56\x3b\xd2\xd1\x52\x68\x9e\x33\x4d\x1b\x8c\x56\xb2\xd3\xf1\xe9\xe9\xeb\xaf\xfd\xf3\x93\xd0\xd9\xd3\x9f\x03\x2a\x5a\x52\x30\x5e\xaf\x48\x79\xa7\xb9\x80\xdf\xef\x8f\x38\x6f\x29\x1c\x60\xa7\xd2\xff\x72\x3c\x24\x40\x6b\x21\x3d\x89\xc2\xc0\x1e\x64\x87\xd2\xd4\x10\x0c\x03\x1e\xe2\x85\x2a\x10\x93\x13\xf0\xee\x80\x4e\x43\x7d\x1e\x03\x5f\x25\x1e\x1f\x0a\x98\xfd\x30\x2c\x3c\xf9\x37\x00\x00\xff\xff\xe1\x02\x87\xcb\xc9\x08\x00\x00")

func assetsTuned07DsTunedYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned07DsTunedYaml,
		"assets/tuned/07-ds-tuned.yaml",
	)
}

func assetsTuned07DsTunedYaml() (*asset, error) {
	bytes, err := assetsTuned07DsTunedYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/07-ds-tuned.yaml", size: 2249, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tuned/01-namespace.yaml":            assetsTuned01NamespaceYaml,
	"assets/tuned/02-service-account.yaml":      assetsTuned02ServiceAccountYaml,
	"assets/tuned/03-cluster-role.yaml":         assetsTuned03ClusterRoleYaml,
	"assets/tuned/04-cluster-role-binding.yaml": assetsTuned04ClusterRoleBindingYaml,
	"assets/tuned/05-cm-tuned-profiles.yaml":    assetsTuned05CmTunedProfilesYaml,
	"assets/tuned/06-cm-tuned-recommend.yaml":   assetsTuned06CmTunedRecommendYaml,
	"assets/tuned/07-ds-tuned.yaml":             assetsTuned07DsTunedYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"tuned": {nil, map[string]*bintree{
			"01-namespace.yaml":            {assetsTuned01NamespaceYaml, map[string]*bintree{}},
			"02-service-account.yaml":      {assetsTuned02ServiceAccountYaml, map[string]*bintree{}},
			"03-cluster-role.yaml":         {assetsTuned03ClusterRoleYaml, map[string]*bintree{}},
			"04-cluster-role-binding.yaml": {assetsTuned04ClusterRoleBindingYaml, map[string]*bintree{}},
			"05-cm-tuned-profiles.yaml":    {assetsTuned05CmTunedProfilesYaml, map[string]*bintree{}},
			"06-cm-tuned-recommend.yaml":   {assetsTuned06CmTunedRecommendYaml, map[string]*bintree{}},
			"07-ds-tuned.yaml":             {assetsTuned07DsTunedYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
